<?php


/**
 *  UTF-8 entity resolver
 *  @name    ScaffoldTemplateEntityUTF8
 *  @package Scaffold
 *  @author  Rogier Spieker <rogier@konfirm.net>
 */
class ScaffoldTemplateEntityUTF8 extends Konsolidate
{
	static public $resolve = Array(
		'excl' => '!', //  exclamation mark
		'quot' => '"', //  quotation mark
		'QUOT' => '"',
		'num' => '#', //  number sign
		'dollar' => '$', //  dollar sign
		'percnt' => '%', //  percent sign
		'amp' => '&', //  ampersand
		'AMP' => '&',
		'apos' => '\'', //  apostrophe
		'lpar' => '(', //  left parenthesis
		'rpar' => ')', //  right parenthesis
		'ast' => '*', //  asterisk
		'midast' => '*',
		'plus' => '+', //  plus sign
		'comma' => ',', //  comma
		'period' => '.', //  full stop
		'sol' => '/', //  solidus
		'colon' => ':', //  colon
		'semi' => ';', //  semicolon
		'lt' => '<', //  less-than sign
		'LT' => '<',
		'equals' => '=', //  equals sign
		'gt' => '>', //  greater-than sign
		'GT' => '>',
		'quest' => '?', //  question mark
		'commat' => '@', //  commercial at
		'lsqb' => '[', //  left square bracket
		'lbrack' => '[',
		'bsol' => '\\', //  reverse solidus
		'rsqb' => ']', //  right square bracket
		'rbrack' => ']',
		'Hat' => '^', //  circumflex accent
		'lowbar' => '_', //  low line
		'grave' => '`', //  grave accent
		'DiacriticalGrave' => '`',
		'lcub' => '{', //  left curly bracket
		'lbrace' => '{',
		'verbar' => '|', //  vertical line
		'vert' => '|',
		'VerticalLine' => '|',
		'rcub' => '}', //  right curly bracket
		'rbrace' => '}',
		'nbsp' => ' ', //  no-break space
		'NonBreakingSpace' => ' ',
		'iexcl' => '¡', //  inverted exclamation mark
		'cent' => '¢', //  cent sign
		'pound' => '£', //  pound sign
		'curren' => '¤', //  currency sign
		'yen' => '¥', //  yen sign
		'brvbar' => '¦', //  broken bar
		'sect' => '§', //  section sign
		'Dot' => '¨', //  diaeresis
		'die' => '¨',
		'DoubleDot' => '¨',
		'uml' => '¨',
		'copy' => '©', //  copyright sign
		'COPY' => '©',
		'ordf' => 'ª', //  feminine ordinal indicator
		'laquo' => '«', //  left-pointing double angle quotation mark
		'not' => '¬', //  not sign
		'shy' => '­', //  soft hyphen
		'reg' => '®', //  registered sign
		'circledR' => '®',
		'REG' => '®',
		'macr' => '¯', //  macron
		'OverBar' => '¯',
		'strns' => '¯',
		'deg' => '°', //  degree sign
		'plusmn' => '±', //  plus-minus sign
		'pm' => '±',
		'PlusMinus' => '±',
		'sup2' => '²', //  superscript two
		'sup3' => '³', //  superscript three
		'acute' => '´', //  acute accent
		'DiacriticalAcute' => '´',
		'micro' => 'µ', //  micro sign
		'para' => '¶', //  pilcrow sign
		'middot' => '·', //  middle dot
		'centerdot' => '·',
		'CenterDot' => '·',
		'cedil' => '¸', //  cedilla
		'Cedilla' => '¸',
		'sup1' => '¹', //  superscript one
		'ordm' => 'º', //  masculine ordinal indicator
		'raquo' => '»', //  right-pointing double angle quotation mark
		'frac14' => '¼', //  vulgar fraction one quarter
		'frac12' => '½', //  vulgar fraction one half
		'half' => '½',
		'frac34' => '¾', //  vulgar fraction three quarters
		'iquest' => '¿', //  inverted question mark
		'Agrave' => 'À', //  latin capital letter a with grave
		'Aacute' => 'Á', //  latin capital letter a with acute
		'Acirc' => 'Â', //  latin capital letter a with circumflex
		'Atilde' => 'Ã', //  latin capital letter a with tilde
		'Auml' => 'Ä', //  latin capital letter a with diaeresis
		'Aring' => 'Å', //  latin capital letter a with ring above
		'AElig' => 'Æ', //  latin capital letter ae
		'Ccedil' => 'Ç', //  latin capital letter c with cedilla
		'Egrave' => 'È', //  latin capital letter e with grave
		'Eacute' => 'É', //  latin capital letter e with acute
		'Ecirc' => 'Ê', //  latin capital letter e with circumflex
		'Euml' => 'Ë', //  latin capital letter e with diaeresis
		'Igrave' => 'Ì', //  latin capital letter i with grave
		'Iacute' => 'Í', //  latin capital letter i with acute
		'Icirc' => 'Î', //  latin capital letter i with circumflex
		'Iuml' => 'Ï', //  latin capital letter i with diaeresis
		'ETH' => 'Ð', //  latin capital letter eth
		'Ntilde' => 'Ñ', //  latin capital letter n with tilde
		'Ograve' => 'Ò', //  latin capital letter o with grave
		'Oacute' => 'Ó', //  latin capital letter o with acute
		'Ocirc' => 'Ô', //  latin capital letter o with circumflex
		'Otilde' => 'Õ', //  latin capital letter o with tilde
		'Ouml' => 'Ö', //  latin capital letter o with diaeresis
		'times' => '×', //  multiplication sign
		'Oslash' => 'Ø', //  latin capital letter o with stroke
		'Ugrave' => 'Ù', //  latin capital letter u with grave
		'Uacute' => 'Ú', //  latin capital letter u with acute
		'Ucirc' => 'Û', //  latin capital letter u with circumflex
		'Uuml' => 'Ü', //  latin capital letter u with diaeresis
		'Yacute' => 'Ý', //  latin capital letter y with acute
		'THORN' => 'Þ', //  latin capital letter thorn
		'szlig' => 'ß', //  latin small letter sharp s
		'agrave' => 'à', //  latin small letter a with grave
		'aacute' => 'á', //  latin small letter a with acute
		'acirc' => 'â', //  latin small letter a with circumflex
		'atilde' => 'ã', //  latin small letter a with tilde
		'auml' => 'ä', //  latin small letter a with diaeresis
		'aring' => 'å', //  latin small letter a with ring above
		'aelig' => 'æ', //  latin small letter ae
		'ccedil' => 'ç', //  latin small letter c with cedilla
		'egrave' => 'è', //  latin small letter e with grave
		'eacute' => 'é', //  latin small letter e with acute
		'ecirc' => 'ê', //  latin small letter e with circumflex
		'euml' => 'ë', //  latin small letter e with diaeresis
		'igrave' => 'ì', //  latin small letter i with grave
		'iacute' => 'í', //  latin small letter i with acute
		'icirc' => 'î', //  latin small letter i with circumflex
		'iuml' => 'ï', //  latin small letter i with diaeresis
		'eth' => 'ð', //  latin small letter eth
		'ntilde' => 'ñ', //  latin small letter n with tilde
		'ograve' => 'ò', //  latin small letter o with grave
		'oacute' => 'ó', //  latin small letter o with acute
		'ocirc' => 'ô', //  latin small letter o with circumflex
		'otilde' => 'õ', //  latin small letter o with tilde
		'ouml' => 'ö', //  latin small letter o with diaeresis
		'divide' => '÷', //  division sign
		'div' => '÷',
		'oslash' => 'ø', //  latin small letter o with stroke
		'ugrave' => 'ù', //  latin small letter u with grave
		'uacute' => 'ú', //  latin small letter u with acute
		'ucirc' => 'û', //  latin small letter u with circumflex
		'uuml' => 'ü', //  latin small letter u with diaeresis
		'yacute' => 'ý', //  latin small letter y with acute
		'thorn' => 'þ', //  latin small letter thorn
		'yuml' => 'ÿ', //  latin small letter y with diaeresis
		'Amacr' => 'Ā', //  latin capital letter a with macron
		'amacr' => 'ā', //  latin small letter a with macron
		'Abreve' => 'Ă', //  latin capital letter a with breve
		'abreve' => 'ă', //  latin small letter a with breve
		'Aogon' => 'Ą', //  latin capital letter a with ogonek
		'aogon' => 'ą', //  latin small letter a with ogonek
		'Cacute' => 'Ć', //  latin capital letter c with acute
		'cacute' => 'ć', //  latin small letter c with acute
		'Ccirc' => 'Ĉ', //  latin capital letter c with circumflex
		'ccirc' => 'ĉ', //  latin small letter c with circumflex
		'Cdot' => 'Ċ', //  latin capital letter c with dot above
		'cdot' => 'ċ', //  latin small letter c with dot above
		'Ccaron' => 'Č', //  latin capital letter c with caron
		'ccaron' => 'č', //  latin small letter c with caron
		'Dcaron' => 'Ď', //  latin capital letter d with caron
		'dcaron' => 'ď', //  latin small letter d with caron
		'Dstrok' => 'Đ', //  latin capital letter d with stroke
		'dstrok' => 'đ', //  latin small letter d with stroke
		'Emacr' => 'Ē', //  latin capital letter e with macron
		'emacr' => 'ē', //  latin small letter e with macron
		'Edot' => 'Ė', //  latin capital letter e with dot above
		'edot' => 'ė', //  latin small letter e with dot above
		'Eogon' => 'Ę', //  latin capital letter e with ogonek
		'eogon' => 'ę', //  latin small letter e with ogonek
		'Ecaron' => 'Ě', //  latin capital letter e with caron
		'ecaron' => 'ě', //  latin small letter e with caron
		'Gcirc' => 'Ĝ', //  latin capital letter g with circumflex
		'gcirc' => 'ĝ', //  latin small letter g with circumflex
		'Gbreve' => 'Ğ', //  latin capital letter g with breve
		'gbreve' => 'ğ', //  latin small letter g with breve
		'Gdot' => 'Ġ', //  latin capital letter g with dot above
		'gdot' => 'ġ', //  latin small letter g with dot above
		'Gcedil' => 'Ģ', //  latin capital letter g with cedilla
		'Hcirc' => 'Ĥ', //  latin capital letter h with circumflex
		'hcirc' => 'ĥ', //  latin small letter h with circumflex
		'Hstrok' => 'Ħ', //  latin capital letter h with stroke
		'hstrok' => 'ħ', //  latin small letter h with stroke
		'Itilde' => 'Ĩ', //  latin capital letter i with tilde
		'itilde' => 'ĩ', //  latin small letter i with tilde
		'Imacr' => 'Ī', //  latin capital letter i with macron
		'imacr' => 'ī', //  latin small letter i with macron
		'Iogon' => 'Į', //  latin capital letter i with ogonek
		'iogon' => 'į', //  latin small letter i with ogonek
		'Idot' => 'İ', //  latin capital letter i with dot above
		'imath' => 'ı', //  latin small letter dotless i
		'inodot' => 'ı',
		'IJlig' => 'Ĳ', //  latin capital ligature ij
		'ijlig' => 'ĳ', //  latin small ligature ij
		'Jcirc' => 'Ĵ', //  latin capital letter j with circumflex
		'jcirc' => 'ĵ', //  latin small letter j with circumflex
		'Kcedil' => 'Ķ', //  latin capital letter k with cedilla
		'kcedil' => 'ķ', //  latin small letter k with cedilla
		'kgreen' => 'ĸ', //  latin small letter kra
		'Lacute' => 'Ĺ', //  latin capital letter l with acute
		'lacute' => 'ĺ', //  latin small letter l with acute
		'Lcedil' => 'Ļ', //  latin capital letter l with cedilla
		'lcedil' => 'ļ', //  latin small letter l with cedilla
		'Lcaron' => 'Ľ', //  latin capital letter l with caron
		'lcaron' => 'ľ', //  latin small letter l with caron
		'Lmidot' => 'Ŀ', //  latin capital letter l with middle dot
		'lmidot' => 'ŀ', //  latin small letter l with middle dot
		'Lstrok' => 'Ł', //  latin capital letter l with stroke
		'lstrok' => 'ł', //  latin small letter l with stroke
		'Nacute' => 'Ń', //  latin capital letter n with acute
		'nacute' => 'ń', //  latin small letter n with acute
		'Ncedil' => 'Ņ', //  latin capital letter n with cedilla
		'ncedil' => 'ņ', //  latin small letter n with cedilla
		'Ncaron' => 'Ň', //  latin capital letter n with caron
		'ncaron' => 'ň', //  latin small letter n with caron
		'napos' => 'ŉ', //  latin small letter n preceded by apostrophe
		'ENG' => 'Ŋ', //  latin capital letter eng
		'eng' => 'ŋ', //  latin small letter eng
		'Omacr' => 'Ō', //  latin capital letter o with macron
		'omacr' => 'ō', //  latin small letter o with macron
		'Odblac' => 'Ő', //  latin capital letter o with double acute
		'odblac' => 'ő', //  latin small letter o with double acute
		'OElig' => 'Œ', //  latin capital ligature oe
		'oelig' => 'œ', //  latin small ligature oe
		'Racute' => 'Ŕ', //  latin capital letter r with acute
		'racute' => 'ŕ', //  latin small letter r with acute
		'Rcedil' => 'Ŗ', //  latin capital letter r with cedilla
		'rcedil' => 'ŗ', //  latin small letter r with cedilla
		'Rcaron' => 'Ř', //  latin capital letter r with caron
		'rcaron' => 'ř', //  latin small letter r with caron
		'Sacute' => 'Ś', //  latin capital letter s with acute
		'sacute' => 'ś', //  latin small letter s with acute
		'Scirc' => 'Ŝ', //  latin capital letter s with circumflex
		'scirc' => 'ŝ', //  latin small letter s with circumflex
		'Scedil' => 'Ş', //  latin capital letter s with cedilla
		'scedil' => 'ş', //  latin small letter s with cedilla
		'Scaron' => 'Š', //  latin capital letter s with caron
		'scaron' => 'š', //  latin small letter s with caron
		'Tcedil' => 'Ţ', //  latin capital letter t with cedilla
		'tcedil' => 'ţ', //  latin small letter t with cedilla
		'Tcaron' => 'Ť', //  latin capital letter t with caron
		'tcaron' => 'ť', //  latin small letter t with caron
		'Tstrok' => 'Ŧ', //  latin capital letter t with stroke
		'tstrok' => 'ŧ', //  latin small letter t with stroke
		'Utilde' => 'Ũ', //  latin capital letter u with tilde
		'utilde' => 'ũ', //  latin small letter u with tilde
		'Umacr' => 'Ū', //  latin capital letter u with macron
		'umacr' => 'ū', //  latin small letter u with macron
		'Ubreve' => 'Ŭ', //  latin capital letter u with breve
		'ubreve' => 'ŭ', //  latin small letter u with breve
		'Uring' => 'Ů', //  latin capital letter u with ring above
		'uring' => 'ů', //  latin small letter u with ring above
		'Udblac' => 'Ű', //  latin capital letter u with double acute
		'udblac' => 'ű', //  latin small letter u with double acute
		'Uogon' => 'Ų', //  latin capital letter u with ogonek
		'uogon' => 'ų', //  latin small letter u with ogonek
		'Wcirc' => 'Ŵ', //  latin capital letter w with circumflex
		'wcirc' => 'ŵ', //  latin small letter w with circumflex
		'Ycirc' => 'Ŷ', //  latin capital letter y with circumflex
		'ycirc' => 'ŷ', //  latin small letter y with circumflex
		'Yuml' => 'Ÿ', //  latin capital letter y with diaeresis
		'Zacute' => 'Ź', //  latin capital letter z with acute
		'zacute' => 'ź', //  latin small letter z with acute
		'Zdot' => 'Ż', //  latin capital letter z with dot above
		'zdot' => 'ż', //  latin small letter z with dot above
		'Zcaron' => 'Ž', //  latin capital letter z with caron
		'zcaron' => 'ž', //  latin small letter z with caron
		'fnof' => 'ƒ', //  latin small letter f with hook
		'imped' => 'Ƶ', //  latin capital letter z with stroke
		'gacute' => 'ǵ', //  latin small letter g with acute
		'jmath' => 'ȷ', //  latin small letter dotless j
		'circ' => 'ˆ', //  modifier letter circumflex accent
		'caron' => 'ˇ', //  caron
		'Hacek' => 'ˇ',
		'breve' => '˘', //  breve
		'Breve' => '˘',
		'dot' => '˙', //  dot above
		'DiacriticalDot' => '˙',
		'ring' => '˚', //  ring above
		'ogon' => '˛', //  ogonek
		'tilde' => '˜', //  small tilde
		'DiacriticalTilde' => '˜',
		'dblac' => '˝', //  double acute accent
		'DiacriticalDoubleAcute' => '˝',
		'DownBreve' => '̑', //  combining inverted breve
		'UnderBar' => '̲', //  combining low line
		'Alpha' => 'Α', //  greek capital letter alpha
		'Beta' => 'Β', //  greek capital letter beta
		'Gamma' => 'Γ', //  greek capital letter gamma
		'Delta' => 'Δ', //  greek capital letter delta
		'Epsilon' => 'Ε', //  greek capital letter epsilon
		'Zeta' => 'Ζ', //  greek capital letter zeta
		'Eta' => 'Η', //  greek capital letter eta
		'Theta' => 'Θ', //  greek capital letter theta
		'Iota' => 'Ι', //  greek capital letter iota
		'Kappa' => 'Κ', //  greek capital letter kappa
		'Lambda' => 'Λ', //  greek capital letter lamda
		'Mu' => 'Μ', //  greek capital letter mu
		'Nu' => 'Ν', //  greek capital letter nu
		'Xi' => 'Ξ', //  greek capital letter xi
		'Omicron' => 'Ο', //  greek capital letter omicron
		'Pi' => 'Π', //  greek capital letter pi
		'Rho' => 'Ρ', //  greek capital letter rho
		'Sigma' => 'Σ', //  greek capital letter sigma
		'Tau' => 'Τ', //  greek capital letter tau
		'Upsilon' => 'Υ', //  greek capital letter upsilon
		'Phi' => 'Φ', //  greek capital letter phi
		'Chi' => 'Χ', //  greek capital letter chi
		'Psi' => 'Ψ', //  greek capital letter psi
		'Omega' => 'Ω', //  greek capital letter omega
		'alpha' => 'α', //  greek small letter alpha
		'beta' => 'β', //  greek small letter beta
		'gamma' => 'γ', //  greek small letter gamma
		'delta' => 'δ', //  greek small letter delta
		'epsiv' => 'ε', //  greek small letter epsilon
		'varepsilon' => 'ε',
		'epsilon' => 'ε',
		'zeta' => 'ζ', //  greek small letter zeta
		'eta' => 'η', //  greek small letter eta
		'theta' => 'θ', //  greek small letter theta
		'iota' => 'ι', //  greek small letter iota
		'kappa' => 'κ', //  greek small letter kappa
		'lambda' => 'λ', //  greek small letter lamda
		'mu' => 'μ', //  greek small letter mu
		'nu' => 'ν', //  greek small letter nu
		'xi' => 'ξ', //  greek small letter xi
		'omicron' => 'ο', //  greek small letter omicron
		'pi' => 'π', //  greek small letter pi
		'rho' => 'ρ', //  greek small letter rho
		'sigmav' => 'ς', //  greek small letter final sigma
		'varsigma' => 'ς',
		'sigmaf' => 'ς',
		'sigma' => 'σ', //  greek small letter sigma
		'tau' => 'τ', //  greek small letter tau
		'upsi' => 'υ', //  greek small letter upsilon
		'upsilon' => 'υ',
		'phi' => 'φ', //  greek small letter phi
		'phiv' => 'φ',
		'varphi' => 'φ',
		'chi' => 'χ', //  greek small letter chi
		'psi' => 'ψ', //  greek small letter psi
		'omega' => 'ω', //  greek small letter omega
		'thetav' => 'ϑ', //  greek theta symbol
		'vartheta' => 'ϑ',
		'thetasym' => 'ϑ',
		'Upsi' => 'ϒ', //  greek upsilon with hook symbol
		'upsih' => 'ϒ',
		'straightphi' => 'ϕ', //  greek phi symbol
		'piv' => 'ϖ', //  greek pi symbol
		'varpi' => 'ϖ',
		'Gammad' => 'Ϝ', //  greek letter digamma
		'gammad' => 'ϝ', //  greek small letter digamma
		'digamma' => 'ϝ',
		'kappav' => 'ϰ', //  greek kappa symbol
		'varkappa' => 'ϰ',
		'rhov' => 'ϱ', //  greek rho symbol
		'varrho' => 'ϱ',
		'epsi' => 'ϵ', //  greek lunate epsilon symbol
		'straightepsilon' => 'ϵ',
		'bepsi' => '϶', //  greek reversed lunate epsilon symbol
		'backepsilon' => '϶',
		'IOcy' => 'Ё', //  cyrillic capital letter io
		'DJcy' => 'Ђ', //  cyrillic capital letter dje
		'GJcy' => 'Ѓ', //  cyrillic capital letter gje
		'Jukcy' => 'Є', //  cyrillic capital letter ukrainian ie
		'DScy' => 'Ѕ', //  cyrillic capital letter dze
		'Iukcy' => 'І', //  cyrillic capital letter byelorussian-ukrainian i
		'YIcy' => 'Ї', //  cyrillic capital letter yi
		'Jsercy' => 'Ј', //  cyrillic capital letter je
		'LJcy' => 'Љ', //  cyrillic capital letter lje
		'NJcy' => 'Њ', //  cyrillic capital letter nje
		'TSHcy' => 'Ћ', //  cyrillic capital letter tshe
		'KJcy' => 'Ќ', //  cyrillic capital letter kje
		'Ubrcy' => 'Ў', //  cyrillic capital letter short u
		'DZcy' => 'Џ', //  cyrillic capital letter dzhe
		'Acy' => 'А', //  cyrillic capital letter a
		'Bcy' => 'Б', //  cyrillic capital letter be
		'Vcy' => 'В', //  cyrillic capital letter ve
		'Gcy' => 'Г', //  cyrillic capital letter ghe
		'Dcy' => 'Д', //  cyrillic capital letter de
		'IEcy' => 'Е', //  cyrillic capital letter ie
		'ZHcy' => 'Ж', //  cyrillic capital letter zhe
		'Zcy' => 'З', //  cyrillic capital letter ze
		'Icy' => 'И', //  cyrillic capital letter i
		'Jcy' => 'Й', //  cyrillic capital letter short i
		'Kcy' => 'К', //  cyrillic capital letter ka
		'Lcy' => 'Л', //  cyrillic capital letter el
		'Mcy' => 'М', //  cyrillic capital letter em
		'Ncy' => 'Н', //  cyrillic capital letter en
		'Ocy' => 'О', //  cyrillic capital letter o
		'Pcy' => 'П', //  cyrillic capital letter pe
		'Rcy' => 'Р', //  cyrillic capital letter er
		'Scy' => 'С', //  cyrillic capital letter es
		'Tcy' => 'Т', //  cyrillic capital letter te
		'Ucy' => 'У', //  cyrillic capital letter u
		'Fcy' => 'Ф', //  cyrillic capital letter ef
		'KHcy' => 'Х', //  cyrillic capital letter ha
		'TScy' => 'Ц', //  cyrillic capital letter tse
		'CHcy' => 'Ч', //  cyrillic capital letter che
		'SHcy' => 'Ш', //  cyrillic capital letter sha
		'SHCHcy' => 'Щ', //  cyrillic capital letter shcha
		'HARDcy' => 'Ъ', //  cyrillic capital letter hard sign
		'Ycy' => 'Ы', //  cyrillic capital letter yeru
		'SOFTcy' => 'Ь', //  cyrillic capital letter soft sign
		'Ecy' => 'Э', //  cyrillic capital letter e
		'YUcy' => 'Ю', //  cyrillic capital letter yu
		'YAcy' => 'Я', //  cyrillic capital letter ya
		'acy' => 'а', //  cyrillic small letter a
		'bcy' => 'б', //  cyrillic small letter be
		'vcy' => 'в', //  cyrillic small letter ve
		'gcy' => 'г', //  cyrillic small letter ghe
		'dcy' => 'д', //  cyrillic small letter de
		'iecy' => 'е', //  cyrillic small letter ie
		'zhcy' => 'ж', //  cyrillic small letter zhe
		'zcy' => 'з', //  cyrillic small letter ze
		'icy' => 'и', //  cyrillic small letter i
		'jcy' => 'й', //  cyrillic small letter short i
		'kcy' => 'к', //  cyrillic small letter ka
		'lcy' => 'л', //  cyrillic small letter el
		'mcy' => 'м', //  cyrillic small letter em
		'ncy' => 'н', //  cyrillic small letter en
		'ocy' => 'о', //  cyrillic small letter o
		'pcy' => 'п', //  cyrillic small letter pe
		'rcy' => 'р', //  cyrillic small letter er
		'scy' => 'с', //  cyrillic small letter es
		'tcy' => 'т', //  cyrillic small letter te
		'ucy' => 'у', //  cyrillic small letter u
		'fcy' => 'ф', //  cyrillic small letter ef
		'khcy' => 'х', //  cyrillic small letter ha
		'tscy' => 'ц', //  cyrillic small letter tse
		'chcy' => 'ч', //  cyrillic small letter che
		'shcy' => 'ш', //  cyrillic small letter sha
		'shchcy' => 'щ', //  cyrillic small letter shcha
		'hardcy' => 'ъ', //  cyrillic small letter hard sign
		'ycy' => 'ы', //  cyrillic small letter yeru
		'softcy' => 'ь', //  cyrillic small letter soft sign
		'ecy' => 'э', //  cyrillic small letter e
		'yucy' => 'ю', //  cyrillic small letter yu
		'yacy' => 'я', //  cyrillic small letter ya
		'iocy' => 'ё', //  cyrillic small letter io
		'djcy' => 'ђ', //  cyrillic small letter dje
		'gjcy' => 'ѓ', //  cyrillic small letter gje
		'jukcy' => 'є', //  cyrillic small letter ukrainian ie
		'dscy' => 'ѕ', //  cyrillic small letter dze
		'iukcy' => 'і', //  cyrillic small letter byelorussian-ukrainian i
		'yicy' => 'ї', //  cyrillic small letter yi
		'jsercy' => 'ј', //  cyrillic small letter je
		'ljcy' => 'љ', //  cyrillic small letter lje
		'njcy' => 'њ', //  cyrillic small letter nje
		'tshcy' => 'ћ', //  cyrillic small letter tshe
		'kjcy' => 'ќ', //  cyrillic small letter kje
		'ubrcy' => 'ў', //  cyrillic small letter short u
		'dzcy' => 'џ', //  cyrillic small letter dzhe
		'ensp' => ' ', //  en space
		'emsp' => ' ', //  em space
		'emsp13' => ' ', //  three-per-em space
		'emsp14' => ' ', //  four-per-em space
		'numsp' => ' ', //  figure space
		'puncsp' => ' ', //  punctuation space
		'thinsp' => ' ', //  thin space
		'ThinSpace' => ' ',
		'hairsp' => ' ', //  hair space
		'VeryThinSpace' => ' ',
		'ZeroWidthSpace' => '​', //  zero width space
		'NegativeVeryThinSpace' => '​',
		'NegativeThinSpace' => '​',
		'NegativeMediumSpace' => '​',
		'NegativeThickSpace' => '​',
		'zwnj' => '‌', //  zero width non-joiner
		'zwj' => '‍', //  zero width joiner
		'lrm' => '‎', //  left-to-right mark
		'rlm' => '‏', //  right-to-left mark
		'hyphen' => '‐', //  hyphen
		'dash' => '‐',
		'ndash' => '–', //  en dash
		'mdash' => '—', //  em dash
		'horbar' => '―', //  horizontal bar
		'Verbar' => '‖', //  double vertical line
		'Vert' => '‖',
		'lsquo' => '‘', //  left single quotation mark
		'OpenCurlyQuote' => '‘',
		'rsquo' => '’', //  right single quotation mark
		'rsquor' => '’',
		'CloseCurlyQuote' => '’',
		'lsquor' => '‚', //  single low-9 quotation mark
		'sbquo' => '‚',
		'ldquo' => '“', //  left double quotation mark
		'OpenCurlyDoubleQuote' => '“',
		'rdquo' => '”', //  right double quotation mark
		'rdquor' => '”',
		'CloseCurlyDoubleQuote' => '”',
		'ldquor' => '„', //  double low-9 quotation mark
		'bdquo' => '„',
		'dagger' => '†', //  dagger
		'Dagger' => '‡', //  double dagger
		'ddagger' => '‡',
		'bull' => '•', //  bullet
		'bullet' => '•',
		'nldr' => '‥', //  two dot leader
		'hellip' => '…', //  horizontal ellipsis
		'mldr' => '…',
		'permil' => '‰', //  per mille sign
		'pertenk' => '‱', //  per ten thousand sign
		'prime' => '′', //  prime
		'Prime' => '″', //  double prime
		'tprime' => '‴', //  triple prime
		'bprime' => '‵', //  reversed prime
		'backprime' => '‵',
		'lsaquo' => '‹', //  single left-pointing angle quotation mark
		'rsaquo' => '›', //  single right-pointing angle quotation mark
		'oline' => '‾', //  overline
		'caret' => '⁁', //  caret insertion point
		'hybull' => '⁃', //  hyphen bullet
		'frasl' => '⁄', //  fraction slash
		'bsemi' => '⁏', //  reversed semicolon
		'qprime' => '⁗', //  quadruple prime
		'MediumSpace' => ' ', //  medium mathematical space
		'NoBreak' => '⁠', //  word joiner
		'ApplyFunction' => '⁡', //  function application
		'af' => '⁡',
		'InvisibleTimes' => '⁢', //  invisible times
		'it' => '⁢',
		'InvisibleComma' => '⁣', //  invisible separator
		'ic' => '⁣',
		'euro' => '€', //  euro sign
		'tdot' => '⃛', //  combining three dots above
		'TripleDot' => '⃛',
		'DotDot' => '⃜', //  combining four dots above
		'Copf' => 'ℂ', //  double-struck capital c
		'complexes' => 'ℂ',
		'incare' => '℅', //  care of
		'gscr' => 'ℊ', //  script small g
		'hamilt' => 'ℋ', //  script capital h
		'HilbertSpace' => 'ℋ',
		'Hscr' => 'ℋ',
		'Hfr' => 'ℌ', //  black-letter capital h
		'Poincareplane' => 'ℌ',
		'quaternions' => 'ℍ', //  double-struck capital h
		'Hopf' => 'ℍ',
		'planckh' => 'ℎ', //  planck constant
		'planck' => 'ℏ', //  planck constant over two pi
		'hbar' => 'ℏ',
		'plankv' => 'ℏ',
		'hslash' => 'ℏ',
		'Iscr' => 'ℐ', //  script capital i
		'imagline' => 'ℐ',
		'image' => 'ℑ', //  black-letter capital i
		'Im' => 'ℑ',
		'imagpart' => 'ℑ',
		'Ifr' => 'ℑ',
		'Lscr' => 'ℒ', //  script capital l
		'lagran' => 'ℒ',
		'Laplacetrf' => 'ℒ',
		'ell' => 'ℓ', //  script small l
		'Nopf' => 'ℕ', //  double-struck capital n
		'naturals' => 'ℕ',
		'numero' => '№', //  numero sign
		'copysr' => '℗', //  sound recording copyright
		'weierp' => '℘', //  script capital p
		'wp' => '℘',
		'Popf' => 'ℙ', //  double-struck capital p
		'primes' => 'ℙ',
		'rationals' => 'ℚ', //  double-struck capital q
		'Qopf' => 'ℚ',
		'Rscr' => 'ℛ', //  script capital r
		'realine' => 'ℛ',
		'real' => 'ℜ', //  black-letter capital r
		'Re' => 'ℜ',
		'realpart' => 'ℜ',
		'Rfr' => 'ℜ',
		'reals' => 'ℝ', //  double-struck capital r
		'Ropf' => 'ℝ',
		'rx' => '℞', //  prescription take
		'trade' => '™', //  trade mark sign
		'TRADE' => '™',
		'integers' => 'ℤ', //  double-struck capital z
		'Zopf' => 'ℤ',
		'ohm' => 'Ω', //  ohm sign
		'mho' => '℧', //  inverted ohm sign
		'Zfr' => 'ℨ', //  black-letter capital z
		'zeetrf' => 'ℨ',
		'iiota' => '℩', //  turned greek small letter iota
		'angst' => 'Å', //  angstrom sign
		'bernou' => 'ℬ', //  script capital b
		'Bernoullis' => 'ℬ',
		'Bscr' => 'ℬ',
		'Cfr' => 'ℭ', //  black-letter capital c
		'Cayleys' => 'ℭ',
		'escr' => 'ℯ', //  script small e
		'Escr' => 'ℰ', //  script capital e
		'expectation' => 'ℰ',
		'Fscr' => 'ℱ', //  script capital f
		'Fouriertrf' => 'ℱ',
		'phmmat' => 'ℳ', //  script capital m
		'Mellintrf' => 'ℳ',
		'Mscr' => 'ℳ',
		'order' => 'ℴ', //  script small o
		'orderof' => 'ℴ',
		'oscr' => 'ℴ',
		'alefsym' => 'ℵ', //  alef symbol
		'aleph' => 'ℵ',
		'beth' => 'ℶ', //  bet symbol
		'gimel' => 'ℷ', //  gimel symbol
		'daleth' => 'ℸ', //  dalet symbol
		'CapitalDifferentialD' => 'ⅅ', //  double-struck italic capital d
		'DD' => 'ⅅ',
		'DifferentialD' => 'ⅆ', //  double-struck italic small d
		'dd' => 'ⅆ',
		'ExponentialE' => 'ⅇ', //  double-struck italic small e
		'exponentiale' => 'ⅇ',
		'ee' => 'ⅇ',
		'ImaginaryI' => 'ⅈ', //  double-struck italic small i
		'ii' => 'ⅈ',
		'frac13' => '⅓', //  vulgar fraction one third
		'frac23' => '⅔', //  vulgar fraction two thirds
		'frac15' => '⅕', //  vulgar fraction one fifth
		'frac25' => '⅖', //  vulgar fraction two fifths
		'frac35' => '⅗', //  vulgar fraction three fifths
		'frac45' => '⅘', //  vulgar fraction four fifths
		'frac16' => '⅙', //  vulgar fraction one sixth
		'frac56' => '⅚', //  vulgar fraction five sixths
		'frac18' => '⅛', //  vulgar fraction one eighth
		'frac38' => '⅜', //  vulgar fraction three eighths
		'frac58' => '⅝', //  vulgar fraction five eighths
		'frac78' => '⅞', //  vulgar fraction seven eighths
		'larr' => '←', //  leftwards arrow
		'leftarrow' => '←',
		'LeftArrow' => '←',
		'slarr' => '←',
		'ShortLeftArrow' => '←',
		'uarr' => '↑', //  upwards arrow
		'uparrow' => '↑',
		'UpArrow' => '↑',
		'ShortUpArrow' => '↑',
		'rarr' => '→', //  rightwards arrow
		'rightarrow' => '→',
		'RightArrow' => '→',
		'srarr' => '→',
		'ShortRightArrow' => '→',
		'darr' => '↓', //  downwards arrow
		'downarrow' => '↓',
		'DownArrow' => '↓',
		'ShortDownArrow' => '↓',
		'harr' => '↔', //  left right arrow
		'leftrightarrow' => '↔',
		'LeftRightArrow' => '↔',
		'varr' => '↕', //  up down arrow
		'updownarrow' => '↕',
		'UpDownArrow' => '↕',
		'nwarr' => '↖', //  north west arrow
		'UpperLeftArrow' => '↖',
		'nwarrow' => '↖',
		'nearr' => '↗', //  north east arrow
		'UpperRightArrow' => '↗',
		'nearrow' => '↗',
		'searr' => '↘', //  south east arrow
		'searrow' => '↘',
		'LowerRightArrow' => '↘',
		'swarr' => '↙', //  south west arrow
		'swarrow' => '↙',
		'LowerLeftArrow' => '↙',
		'nlarr' => '↚', //  leftwards arrow with stroke
		'nleftarrow' => '↚',
		'nrarr' => '↛', //  rightwards arrow with stroke
		'nrightarrow' => '↛',
		'rarrw' => '↝', //  rightwards wave arrow
		'rightsquigarrow' => '↝',
		'Larr' => '↞', //  leftwards two headed arrow
		'twoheadleftarrow' => '↞',
		'Uarr' => '↟', //  upwards two headed arrow
		'Rarr' => '↠', //  rightwards two headed arrow
		'twoheadrightarrow' => '↠',
		'Darr' => '↡', //  downwards two headed arrow
		'larrtl' => '↢', //  leftwards arrow with tail
		'leftarrowtail' => '↢',
		'rarrtl' => '↣', //  rightwards arrow with tail
		'rightarrowtail' => '↣',
		'LeftTeeArrow' => '↤', //  leftwards arrow from bar
		'mapstoleft' => '↤',
		'UpTeeArrow' => '↥', //  upwards arrow from bar
		'mapstoup' => '↥',
		'map' => '↦', //  rightwards arrow from bar
		'RightTeeArrow' => '↦',
		'mapsto' => '↦',
		'DownTeeArrow' => '↧', //  downwards arrow from bar
		'mapstodown' => '↧',
		'larrhk' => '↩', //  leftwards arrow with hook
		'hookleftarrow' => '↩',
		'rarrhk' => '↪', //  rightwards arrow with hook
		'hookrightarrow' => '↪',
		'larrlp' => '↫', //  leftwards arrow with loop
		'looparrowleft' => '↫',
		'rarrlp' => '↬', //  rightwards arrow with loop
		'looparrowright' => '↬',
		'harrw' => '↭', //  left right wave arrow
		'leftrightsquigarrow' => '↭',
		'nharr' => '↮', //  left right arrow with stroke
		'nleftrightarrow' => '↮',
		'lsh' => '↰', //  upwards arrow with tip leftwards
		'Lsh' => '↰',
		'rsh' => '↱', //  upwards arrow with tip rightwards
		'Rsh' => '↱',
		'ldsh' => '↲', //  downwards arrow with tip leftwards
		'rdsh' => '↳', //  downwards arrow with tip rightwards
		'crarr' => '↵', //  downwards arrow with corner leftwards
		'cularr' => '↶', //  anticlockwise top semicircle arrow
		'curvearrowleft' => '↶',
		'curarr' => '↷', //  clockwise top semicircle arrow
		'curvearrowright' => '↷',
		'olarr' => '↺', //  anticlockwise open circle arrow
		'circlearrowleft' => '↺',
		'orarr' => '↻', //  clockwise open circle arrow
		'circlearrowright' => '↻',
		'lharu' => '↼', //  leftwards harpoon with barb upwards
		'LeftVector' => '↼',
		'leftharpoonup' => '↼',
		'lhard' => '↽', //  leftwards harpoon with barb downwards
		'leftharpoondown' => '↽',
		'DownLeftVector' => '↽',
		'uharr' => '↾', //  upwards harpoon with barb rightwards
		'upharpoonright' => '↾',
		'RightUpVector' => '↾',
		'uharl' => '↿', //  upwards harpoon with barb leftwards
		'upharpoonleft' => '↿',
		'LeftUpVector' => '↿',
		'rharu' => '⇀', //  rightwards harpoon with barb upwards
		'RightVector' => '⇀',
		'rightharpoonup' => '⇀',
		'rhard' => '⇁', //  rightwards harpoon with barb downwards
		'rightharpoondown' => '⇁',
		'DownRightVector' => '⇁',
		'dharr' => '⇂', //  downwards harpoon with barb rightwards
		'RightDownVector' => '⇂',
		'downharpoonright' => '⇂',
		'dharl' => '⇃', //  downwards harpoon with barb leftwards
		'LeftDownVector' => '⇃',
		'downharpoonleft' => '⇃',
		'rlarr' => '⇄', //  rightwards arrow over leftwards arrow
		'rightleftarrows' => '⇄',
		'RightArrowLeftArrow' => '⇄',
		'udarr' => '⇅', //  upwards arrow leftwards of downwards arrow
		'UpArrowDownArrow' => '⇅',
		'lrarr' => '⇆', //  leftwards arrow over rightwards arrow
		'leftrightarrows' => '⇆',
		'LeftArrowRightArrow' => '⇆',
		'llarr' => '⇇', //  leftwards paired arrows
		'leftleftarrows' => '⇇',
		'uuarr' => '⇈', //  upwards paired arrows
		'upuparrows' => '⇈',
		'rrarr' => '⇉', //  rightwards paired arrows
		'rightrightarrows' => '⇉',
		'ddarr' => '⇊', //  downwards paired arrows
		'downdownarrows' => '⇊',
		'lrhar' => '⇋', //  leftwards harpoon over rightwards harpoon
		'ReverseEquilibrium' => '⇋',
		'leftrightharpoons' => '⇋',
		'rlhar' => '⇌', //  rightwards harpoon over leftwards harpoon
		'rightleftharpoons' => '⇌',
		'Equilibrium' => '⇌',
		'nlArr' => '⇍', //  leftwards double arrow with stroke
		'nLeftarrow' => '⇍',
		'nhArr' => '⇎', //  left right double arrow with stroke
		'nLeftrightarrow' => '⇎',
		'nrArr' => '⇏', //  rightwards double arrow with stroke
		'nRightarrow' => '⇏',
		'lArr' => '⇐', //  leftwards double arrow
		'Leftarrow' => '⇐',
		'DoubleLeftArrow' => '⇐',
		'uArr' => '⇑', //  upwards double arrow
		'Uparrow' => '⇑',
		'DoubleUpArrow' => '⇑',
		'rArr' => '⇒', //  rightwards double arrow
		'Rightarrow' => '⇒',
		'Implies' => '⇒',
		'DoubleRightArrow' => '⇒',
		'dArr' => '⇓', //  downwards double arrow
		'Downarrow' => '⇓',
		'DoubleDownArrow' => '⇓',
		'hArr' => '⇔', //  left right double arrow
		'Leftrightarrow' => '⇔',
		'DoubleLeftRightArrow' => '⇔',
		'iff' => '⇔',
		'vArr' => '⇕', //  up down double arrow
		'Updownarrow' => '⇕',
		'DoubleUpDownArrow' => '⇕',
		'nwArr' => '⇖', //  north west double arrow
		'neArr' => '⇗', //  north east double arrow
		'seArr' => '⇘', //  south east double arrow
		'swArr' => '⇙', //  south west double arrow
		'lAarr' => '⇚', //  leftwards triple arrow
		'Lleftarrow' => '⇚',
		'rAarr' => '⇛', //  rightwards triple arrow
		'Rrightarrow' => '⇛',
		'zigrarr' => '⇝', //  rightwards squiggle arrow
		'larrb' => '⇤', //  leftwards arrow to bar
		'LeftArrowBar' => '⇤',
		'rarrb' => '⇥', //  rightwards arrow to bar
		'RightArrowBar' => '⇥',
		'duarr' => '⇵', //  downwards arrow leftwards of upwards arrow
		'DownArrowUpArrow' => '⇵',
		'loarr' => '⇽', //  leftwards open-headed arrow
		'roarr' => '⇾', //  rightwards open-headed arrow
		'hoarr' => '⇿', //  left right open-headed arrow
		'forall' => '∀', //  for all
		'ForAll' => '∀',
		'comp' => '∁', //  complement
		'complement' => '∁',
		'part' => '∂', //  partial differential
		'PartialD' => '∂',
		'exist' => '∃', //  there exists
		'Exists' => '∃',
		'nexist' => '∄', //  there does not exist
		'NotExists' => '∄',
		'nexists' => '∄',
		'empty' => '∅', //  empty set
		'emptyset' => '∅',
		'emptyv' => '∅',
		'varnothing' => '∅',
		'nabla' => '∇', //  nabla
		'Del' => '∇',
		'isin' => '∈', //  element of
		'isinv' => '∈',
		'Element' => '∈',
		'in' => '∈',
		'notin' => '∉', //  not an element of
		'NotElement' => '∉',
		'notinva' => '∉',
		'niv' => '∋', //  contains as member
		'ReverseElement' => '∋',
		'ni' => '∋',
		'SuchThat' => '∋',
		'notni' => '∌', //  does not contain as member
		'notniva' => '∌',
		'NotReverseElement' => '∌',
		'prod' => '∏', //  n-ary product
		'Product' => '∏',
		'coprod' => '∐', //  n-ary coproduct
		'Coproduct' => '∐',
		'sum' => '∑', //  n-ary summation
		'Sum' => '∑',
		'minus' => '−', //  minus sign
		'mnplus' => '∓', //  minus-or-plus sign
		'mp' => '∓',
		'MinusPlus' => '∓',
		'plusdo' => '∔', //  dot plus
		'dotplus' => '∔',
		'setmn' => '∖', //  set minus
		'setminus' => '∖',
		'Backslash' => '∖',
		'ssetmn' => '∖',
		'smallsetminus' => '∖',
		'lowast' => '∗', //  asterisk operator
		'compfn' => '∘', //  ring operator
		'SmallCircle' => '∘',
		'radic' => '√', //  square root
		'Sqrt' => '√',
		'prop' => '∝', //  proportional to
		'propto' => '∝',
		'Proportional' => '∝',
		'vprop' => '∝',
		'varpropto' => '∝',
		'infin' => '∞', //  infinity
		'angrt' => '∟', //  right angle
		'ang' => '∠', //  angle
		'angle' => '∠',
		'angmsd' => '∡', //  measured angle
		'measuredangle' => '∡',
		'angsph' => '∢', //  spherical angle
		'mid' => '∣', //  divides
		'VerticalBar' => '∣',
		'smid' => '∣',
		'shortmid' => '∣',
		'nmid' => '∤', //  does not divide
		'NotVerticalBar' => '∤',
		'nsmid' => '∤',
		'nshortmid' => '∤',
		'par' => '∥', //  parallel to
		'parallel' => '∥',
		'DoubleVerticalBar' => '∥',
		'spar' => '∥',
		'shortparallel' => '∥',
		'npar' => '∦', //  not parallel to
		'nparallel' => '∦',
		'NotDoubleVerticalBar' => '∦',
		'nspar' => '∦',
		'nshortparallel' => '∦',
		'and' => '∧', //  logical and
		'wedge' => '∧',
		'or' => '∨', //  logical or
		'vee' => '∨',
		'cap' => '∩', //  intersection
		'cup' => '∪', //  union
		'int' => '∫', //  integral
		'Integral' => '∫',
		'Int' => '∬', //  double integral
		'tint' => '∭', //  triple integral
		'iiint' => '∭',
		'conint' => '∮', //  contour integral
		'oint' => '∮',
		'ContourIntegral' => '∮',
		'Conint' => '∯', //  surface integral
		'DoubleContourIntegral' => '∯',
		'Cconint' => '∰', //  volume integral
		'cwint' => '∱', //  clockwise integral
		'cwconint' => '∲', //  clockwise contour integral
		'ClockwiseContourIntegral' => '∲',
		'awconint' => '∳', //  anticlockwise contour integral
		'CounterClockwiseContourIntegral' => '∳',
		'there4' => '∴', //  therefore
		'therefore' => '∴',
		'Therefore' => '∴',
		'becaus' => '∵', //  because
		'because' => '∵',
		'Because' => '∵',
		'ratio' => '∶', //  ratio
		'Colon' => '∷', //  proportion
		'Proportion' => '∷',
		'minusd' => '∸', //  dot minus
		'dotminus' => '∸',
		'mDDot' => '∺', //  geometric proportion
		'homtht' => '∻', //  homothetic
		'sim' => '∼', //  tilde operator
		'Tilde' => '∼',
		'thksim' => '∼',
		'thicksim' => '∼',
		'bsim' => '∽', //  reversed tilde
		'backsim' => '∽',
		'ac' => '∾', //  inverted lazy s
		'mstpos' => '∾',
		'acd' => '∿', //  sine wave
		'wreath' => '≀', //  wreath product
		'VerticalTilde' => '≀',
		'wr' => '≀',
		'nsim' => '≁', //  not tilde
		'NotTilde' => '≁',
		'esim' => '≂', //  minus tilde
		'EqualTilde' => '≂',
		'eqsim' => '≂',
		'sime' => '≃', //  asymptotically equal to
		'TildeEqual' => '≃',
		'simeq' => '≃',
		'nsime' => '≄', //  not asymptotically equal to
		'nsimeq' => '≄',
		'NotTildeEqual' => '≄',
		'cong' => '≅', //  approximately equal to
		'TildeFullEqual' => '≅',
		'simne' => '≆', //  approximately but not actually equal to
		'ncong' => '≇', //  neither approximately nor actually equal to
		'NotTildeFullEqual' => '≇',
		'asymp' => '≈', //  almost equal to
		'ap' => '≈',
		'TildeTilde' => '≈',
		'approx' => '≈',
		'thkap' => '≈',
		'thickapprox' => '≈',
		'nap' => '≉', //  not almost equal to
		'NotTildeTilde' => '≉',
		'napprox' => '≉',
		'ape' => '≊', //  almost equal or equal to
		'approxeq' => '≊',
		'apid' => '≋', //  triple tilde
		'bcong' => '≌', //  all equal to
		'backcong' => '≌',
		'asympeq' => '≍', //  equivalent to
		'CupCap' => '≍',
		'bump' => '≎', //  geometrically equivalent to
		'HumpDownHump' => '≎',
		'Bumpeq' => '≎',
		'bumpe' => '≏', //  difference between
		'HumpEqual' => '≏',
		'bumpeq' => '≏',
		'esdot' => '≐', //  approaches the limit
		'DotEqual' => '≐',
		'doteq' => '≐',
		'eDot' => '≑', //  geometrically equal to
		'doteqdot' => '≑',
		'efDot' => '≒', //  approximately equal to or the image of
		'fallingdotseq' => '≒',
		'erDot' => '≓', //  image of or approximately equal to
		'risingdotseq' => '≓',
		'colone' => '≔', //  colon equals
		'coloneq' => '≔',
		'Assign' => '≔',
		'ecolon' => '≕', //  equals colon
		'eqcolon' => '≕',
		'ecir' => '≖', //  ring in equal to
		'eqcirc' => '≖',
		'cire' => '≗', //  ring equal to
		'circeq' => '≗',
		'wedgeq' => '≙', //  estimates
		'veeeq' => '≚', //  equiangular to
		'trie' => '≜', //  delta equal to
		'triangleq' => '≜',
		'equest' => '≟', //  questioned equal to
		'questeq' => '≟',
		'ne' => '≠', //  not equal to
		'NotEqual' => '≠',
		'equiv' => '≡', //  identical to
		'Congruent' => '≡',
		'nequiv' => '≢', //  not identical to
		'NotCongruent' => '≢',
		'le' => '≤', //  less-than or equal to
		'leq' => '≤',
		'ge' => '≥', //  greater-than or equal to
		'GreaterEqual' => '≥',
		'geq' => '≥',
		'lE' => '≦', //  less-than over equal to
		'LessFullEqual' => '≦',
		'leqq' => '≦',
		'gE' => '≧', //  greater-than over equal to
		'GreaterFullEqual' => '≧',
		'geqq' => '≧',
		'lnE' => '≨', //  less-than but not equal to
		'lneqq' => '≨',
		'gnE' => '≩', //  greater-than but not equal to
		'gneqq' => '≩',
		'Lt' => '≪', //  much less-than
		'NestedLessLess' => '≪',
		'll' => '≪',
		'Gt' => '≫', //  much greater-than
		'NestedGreaterGreater' => '≫',
		'gg' => '≫',
		'twixt' => '≬', //  between
		'between' => '≬',
		'NotCupCap' => '≭', //  not equivalent to
		'nlt' => '≮', //  not less-than
		'NotLess' => '≮',
		'nless' => '≮',
		'ngt' => '≯', //  not greater-than
		'NotGreater' => '≯',
		'ngtr' => '≯',
		'nle' => '≰', //  neither less-than nor equal to
		'NotLessEqual' => '≰',
		'nleq' => '≰',
		'nge' => '≱', //  neither greater-than nor equal to
		'NotGreaterEqual' => '≱',
		'ngeq' => '≱',
		'lsim' => '≲', //  less-than or equivalent to
		'LessTilde' => '≲',
		'lesssim' => '≲',
		'gsim' => '≳', //  greater-than or equivalent to
		'gtrsim' => '≳',
		'GreaterTilde' => '≳',
		'nlsim' => '≴', //  neither less-than nor equivalent to
		'NotLessTilde' => '≴',
		'ngsim' => '≵', //  neither greater-than nor equivalent to
		'NotGreaterTilde' => '≵',
		'lg' => '≶', //  less-than or greater-than
		'lessgtr' => '≶',
		'LessGreater' => '≶',
		'gl' => '≷', //  greater-than or less-than
		'gtrless' => '≷',
		'GreaterLess' => '≷',
		'ntlg' => '≸', //  neither less-than nor greater-than
		'NotLessGreater' => '≸',
		'ntgl' => '≹', //  neither greater-than nor less-than
		'NotGreaterLess' => '≹',
		'pr' => '≺', //  precedes
		'Precedes' => '≺',
		'prec' => '≺',
		'sc' => '≻', //  succeeds
		'Succeeds' => '≻',
		'succ' => '≻',
		'prcue' => '≼', //  precedes or equal to
		'PrecedesSlantEqual' => '≼',
		'preccurlyeq' => '≼',
		'sccue' => '≽', //  succeeds or equal to
		'SucceedsSlantEqual' => '≽',
		'succcurlyeq' => '≽',
		'prsim' => '≾', //  precedes or equivalent to
		'precsim' => '≾',
		'PrecedesTilde' => '≾',
		'scsim' => '≿', //  succeeds or equivalent to
		'succsim' => '≿',
		'SucceedsTilde' => '≿',
		'npr' => '⊀', //  does not precede
		'nprec' => '⊀',
		'NotPrecedes' => '⊀',
		'nsc' => '⊁', //  does not succeed
		'nsucc' => '⊁',
		'NotSucceeds' => '⊁',
		'sub' => '⊂', //  subset of
		'subset' => '⊂',
		'sup' => '⊃', //  superset of
		'supset' => '⊃',
		'Superset' => '⊃',
		'nsub' => '⊄', //  not a subset of
		'nsup' => '⊅', //  not a superset of
		'sube' => '⊆', //  subset of or equal to
		'SubsetEqual' => '⊆',
		'subseteq' => '⊆',
		'supe' => '⊇', //  superset of or equal to
		'supseteq' => '⊇',
		'SupersetEqual' => '⊇',
		'nsube' => '⊈', //  neither a subset of nor equal to
		'nsubseteq' => '⊈',
		'NotSubsetEqual' => '⊈',
		'nsupe' => '⊉', //  neither a superset of nor equal to
		'nsupseteq' => '⊉',
		'NotSupersetEqual' => '⊉',
		'subne' => '⊊', //  subset of with not equal to
		'subsetneq' => '⊊',
		'supne' => '⊋', //  superset of with not equal to
		'supsetneq' => '⊋',
		'cupdot' => '⊍', //  multiset multiplication
		'uplus' => '⊎', //  multiset union
		'UnionPlus' => '⊎',
		'sqsub' => '⊏', //  square image of
		'SquareSubset' => '⊏',
		'sqsubset' => '⊏',
		'sqsup' => '⊐', //  square original of
		'SquareSuperset' => '⊐',
		'sqsupset' => '⊐',
		'sqsube' => '⊑', //  square image of or equal to
		'SquareSubsetEqual' => '⊑',
		'sqsubseteq' => '⊑',
		'sqsupe' => '⊒', //  square original of or equal to
		'SquareSupersetEqual' => '⊒',
		'sqsupseteq' => '⊒',
		'sqcap' => '⊓', //  square cap
		'SquareIntersection' => '⊓',
		'sqcup' => '⊔', //  square cup
		'SquareUnion' => '⊔',
		'oplus' => '⊕', //  circled plus
		'CirclePlus' => '⊕',
		'ominus' => '⊖', //  circled minus
		'CircleMinus' => '⊖',
		'otimes' => '⊗', //  circled times
		'CircleTimes' => '⊗',
		'osol' => '⊘', //  circled division slash
		'odot' => '⊙', //  circled dot operator
		'CircleDot' => '⊙',
		'ocir' => '⊚', //  circled ring operator
		'circledcirc' => '⊚',
		'oast' => '⊛', //  circled asterisk operator
		'circledast' => '⊛',
		'odash' => '⊝', //  circled dash
		'circleddash' => '⊝',
		'plusb' => '⊞', //  squared plus
		'boxplus' => '⊞',
		'minusb' => '⊟', //  squared minus
		'boxminus' => '⊟',
		'timesb' => '⊠', //  squared times
		'boxtimes' => '⊠',
		'sdotb' => '⊡', //  squared dot operator
		'dotsquare' => '⊡',
		'vdash' => '⊢', //  right tack
		'RightTee' => '⊢',
		'dashv' => '⊣', //  left tack
		'LeftTee' => '⊣',
		'top' => '⊤', //  down tack
		'DownTee' => '⊤',
		'bottom' => '⊥', //  up tack
		'bot' => '⊥',
		'perp' => '⊥',
		'UpTee' => '⊥',
		'models' => '⊧', //  models
		'vDash' => '⊨', //  true
		'DoubleRightTee' => '⊨',
		'Vdash' => '⊩', //  forces
		'Vvdash' => '⊪', //  triple vertical bar right turnstile
		'VDash' => '⊫', //  double vertical bar double right turnstile
		'nvdash' => '⊬', //  does not prove
		'nvDash' => '⊭', //  not true
		'nVdash' => '⊮', //  does not force
		'nVDash' => '⊯', //  negated double vertical bar double right turnstile
		'prurel' => '⊰', //  precedes under relation
		'vltri' => '⊲', //  normal subgroup of
		'vartriangleleft' => '⊲',
		'LeftTriangle' => '⊲',
		'vrtri' => '⊳', //  contains as normal subgroup
		'vartriangleright' => '⊳',
		'RightTriangle' => '⊳',
		'ltrie' => '⊴', //  normal subgroup of or equal to
		'trianglelefteq' => '⊴',
		'LeftTriangleEqual' => '⊴',
		'rtrie' => '⊵', //  contains as normal subgroup or equal to
		'trianglerighteq' => '⊵',
		'RightTriangleEqual' => '⊵',
		'origof' => '⊶', //  original of
		'imof' => '⊷', //  image of
		'mumap' => '⊸', //  multimap
		'multimap' => '⊸',
		'hercon' => '⊹', //  hermitian conjugate matrix
		'intcal' => '⊺', //  intercalate
		'intercal' => '⊺',
		'veebar' => '⊻', //  xor
		'barvee' => '⊽', //  nor
		'angrtvb' => '⊾', //  right angle with arc
		'lrtri' => '⊿', //  right triangle
		'xwedge' => '⋀', //  n-ary logical and
		'Wedge' => '⋀',
		'bigwedge' => '⋀',
		'xvee' => '⋁', //  n-ary logical or
		'Vee' => '⋁',
		'bigvee' => '⋁',
		'xcap' => '⋂', //  n-ary intersection
		'Intersection' => '⋂',
		'bigcap' => '⋂',
		'xcup' => '⋃', //  n-ary union
		'Union' => '⋃',
		'bigcup' => '⋃',
		'diam' => '⋄', //  diamond operator
		'diamond' => '⋄',
		'Diamond' => '⋄',
		'sdot' => '⋅', //  dot operator
		'sstarf' => '⋆', //  star operator
		'Star' => '⋆',
		'divonx' => '⋇', //  division times
		'divideontimes' => '⋇',
		'bowtie' => '⋈', //  bowtie
		'ltimes' => '⋉', //  left normal factor semidirect product
		'rtimes' => '⋊', //  right normal factor semidirect product
		'lthree' => '⋋', //  left semidirect product
		'leftthreetimes' => '⋋',
		'rthree' => '⋌', //  right semidirect product
		'rightthreetimes' => '⋌',
		'bsime' => '⋍', //  reversed tilde equals
		'backsimeq' => '⋍',
		'cuvee' => '⋎', //  curly logical or
		'curlyvee' => '⋎',
		'cuwed' => '⋏', //  curly logical and
		'curlywedge' => '⋏',
		'Sub' => '⋐', //  double subset
		'Subset' => '⋐',
		'Sup' => '⋑', //  double superset
		'Supset' => '⋑',
		'Cap' => '⋒', //  double intersection
		'Cup' => '⋓', //  double union
		'fork' => '⋔', //  pitchfork
		'pitchfork' => '⋔',
		'epar' => '⋕', //  equal and parallel to
		'ltdot' => '⋖', //  less-than with dot
		'lessdot' => '⋖',
		'gtdot' => '⋗', //  greater-than with dot
		'gtrdot' => '⋗',
		'Ll' => '⋘', //  very much less-than
		'Gg' => '⋙', //  very much greater-than
		'ggg' => '⋙',
		'leg' => '⋚', //  less-than equal to or greater-than
		'LessEqualGreater' => '⋚',
		'lesseqgtr' => '⋚',
		'gel' => '⋛', //  greater-than equal to or less-than
		'gtreqless' => '⋛',
		'GreaterEqualLess' => '⋛',
		'cuepr' => '⋞', //  equal to or precedes
		'curlyeqprec' => '⋞',
		'cuesc' => '⋟', //  equal to or succeeds
		'curlyeqsucc' => '⋟',
		'nprcue' => '⋠', //  does not precede or equal
		'NotPrecedesSlantEqual' => '⋠',
		'nsccue' => '⋡', //  does not succeed or equal
		'NotSucceedsSlantEqual' => '⋡',
		'nsqsube' => '⋢', //  not square image of or equal to
		'NotSquareSubsetEqual' => '⋢',
		'nsqsupe' => '⋣', //  not square original of or equal to
		'NotSquareSupersetEqual' => '⋣',
		'lnsim' => '⋦', //  less-than but not equivalent to
		'gnsim' => '⋧', //  greater-than but not equivalent to
		'prnsim' => '⋨', //  precedes but not equivalent to
		'precnsim' => '⋨',
		'scnsim' => '⋩', //  succeeds but not equivalent to
		'succnsim' => '⋩',
		'nltri' => '⋪', //  not normal subgroup of
		'ntriangleleft' => '⋪',
		'NotLeftTriangle' => '⋪',
		'nrtri' => '⋫', //  does not contain as normal subgroup
		'ntriangleright' => '⋫',
		'NotRightTriangle' => '⋫',
		'nltrie' => '⋬', //  not normal subgroup of or equal to
		'ntrianglelefteq' => '⋬',
		'NotLeftTriangleEqual' => '⋬',
		'nrtrie' => '⋭', //  does not contain as normal subgroup or equal
		'ntrianglerighteq' => '⋭',
		'NotRightTriangleEqual' => '⋭',
		'vellip' => '⋮', //  vertical ellipsis
		'ctdot' => '⋯', //  midline horizontal ellipsis
		'utdot' => '⋰', //  up right diagonal ellipsis
		'dtdot' => '⋱', //  down right diagonal ellipsis
		'disin' => '⋲', //  element of with long horizontal stroke
		'isinsv' => '⋳', //  element of with vertical bar at end of horizontal stroke
		'isins' => '⋴', //  small element of with vertical bar at end of horizontal stroke
		'isindot' => '⋵', //  element of with dot above
		'notinvc' => '⋶', //  element of with overbar
		'notinvb' => '⋷', //  small element of with overbar
		'isinE' => '⋹', //  element of with two horizontal strokes
		'nisd' => '⋺', //  contains with long horizontal stroke
		'xnis' => '⋻', //  contains with vertical bar at end of horizontal stroke
		'nis' => '⋼', //  small contains with vertical bar at end of horizontal stroke
		'notnivc' => '⋽', //  contains with overbar
		'notnivb' => '⋾', //  small contains with overbar
		'barwed' => '⌅', //  projective
		'barwedge' => '⌅',
		'Barwed' => '⌆', //  perspective
		'doublebarwedge' => '⌆',
		'lceil' => '⌈', //  left ceiling
		'LeftCeiling' => '⌈',
		'rceil' => '⌉', //  right ceiling
		'RightCeiling' => '⌉',
		'lfloor' => '⌊', //  left floor
		'LeftFloor' => '⌊',
		'rfloor' => '⌋', //  right floor
		'RightFloor' => '⌋',
		'drcrop' => '⌌', //  bottom right crop
		'dlcrop' => '⌍', //  bottom left crop
		'urcrop' => '⌎', //  top right crop
		'ulcrop' => '⌏', //  top left crop
		'bnot' => '⌐', //  reversed not sign
		'profline' => '⌒', //  arc
		'profsurf' => '⌓', //  segment
		'telrec' => '⌕', //  telephone recorder
		'target' => '⌖', //  position indicator
		'ulcorn' => '⌜', //  top left corner
		'ulcorner' => '⌜',
		'urcorn' => '⌝', //  top right corner
		'urcorner' => '⌝',
		'dlcorn' => '⌞', //  bottom left corner
		'llcorner' => '⌞',
		'drcorn' => '⌟', //  bottom right corner
		'lrcorner' => '⌟',
		'frown' => '⌢', //  frown
		'sfrown' => '⌢',
		'smile' => '⌣', //  smile
		'ssmile' => '⌣',
		'cylcty' => '⌭', //  cylindricity
		'profalar' => '⌮', //  all around-profile
		'topbot' => '⌶', //  apl functional symbol i-beam
		'ovbar' => '⌽', //  apl functional symbol circle stile
		'solbar' => '⌿', //  apl functional symbol slash bar
		'angzarr' => '⍼', //  right angle with downwards zigzag arrow
		'lmoust' => '⎰', //  upper left or lower right curly bracket section
		'lmoustache' => '⎰',
		'rmoust' => '⎱', //  upper right or lower left curly bracket section
		'rmoustache' => '⎱',
		'tbrk' => '⎴', //  top square bracket
		'OverBracket' => '⎴',
		'bbrk' => '⎵', //  bottom square bracket
		'UnderBracket' => '⎵',
		'bbrktbrk' => '⎶', //  bottom square bracket over top square bracket
		'OverParenthesis' => '⏜', //  top parenthesis
		'UnderParenthesis' => '⏝', //  bottom parenthesis
		'OverBrace' => '⏞', //  top curly bracket
		'UnderBrace' => '⏟', //  bottom curly bracket
		'trpezium' => '⏢', //  white trapezium
		'elinters' => '⏧', //  electrical intersection
		'blank' => '␣', //  open box
		'oS' => 'Ⓢ', //  circled latin capital letter s
		'circledS' => 'Ⓢ',
		'boxh' => '─', //  box drawings light horizontal
		'HorizontalLine' => '─',
		'boxv' => '│', //  box drawings light vertical
		'boxdr' => '┌', //  box drawings light down and right
		'boxdl' => '┐', //  box drawings light down and left
		'boxur' => '└', //  box drawings light up and right
		'boxul' => '┘', //  box drawings light up and left
		'boxvr' => '├', //  box drawings light vertical and right
		'boxvl' => '┤', //  box drawings light vertical and left
		'boxhd' => '┬', //  box drawings light down and horizontal
		'boxhu' => '┴', //  box drawings light up and horizontal
		'boxvh' => '┼', //  box drawings light vertical and horizontal
		'boxH' => '═', //  box drawings double horizontal
		'boxV' => '║', //  box drawings double vertical
		'boxdR' => '╒', //  box drawings down single and right double
		'boxDr' => '╓', //  box drawings down double and right single
		'boxDR' => '╔', //  box drawings double down and right
		'boxdL' => '╕', //  box drawings down single and left double
		'boxDl' => '╖', //  box drawings down double and left single
		'boxDL' => '╗', //  box drawings double down and left
		'boxuR' => '╘', //  box drawings up single and right double
		'boxUr' => '╙', //  box drawings up double and right single
		'boxUR' => '╚', //  box drawings double up and right
		'boxuL' => '╛', //  box drawings up single and left double
		'boxUl' => '╜', //  box drawings up double and left single
		'boxUL' => '╝', //  box drawings double up and left
		'boxvR' => '╞', //  box drawings vertical single and right double
		'boxVr' => '╟', //  box drawings vertical double and right single
		'boxVR' => '╠', //  box drawings double vertical and right
		'boxvL' => '╡', //  box drawings vertical single and left double
		'boxVl' => '╢', //  box drawings vertical double and left single
		'boxVL' => '╣', //  box drawings double vertical and left
		'boxHd' => '╤', //  box drawings down single and horizontal double
		'boxhD' => '╥', //  box drawings down double and horizontal single
		'boxHD' => '╦', //  box drawings double down and horizontal
		'boxHu' => '╧', //  box drawings up single and horizontal double
		'boxhU' => '╨', //  box drawings up double and horizontal single
		'boxHU' => '╩', //  box drawings double up and horizontal
		'boxvH' => '╪', //  box drawings vertical single and horizontal double
		'boxVh' => '╫', //  box drawings vertical double and horizontal single
		'boxVH' => '╬', //  box drawings double vertical and horizontal
		'uhblk' => '▀', //  upper half block
		'lhblk' => '▄', //  lower half block
		'block' => '█', //  full block
		'blk14' => '░', //  light shade
		'blk12' => '▒', //  medium shade
		'blk34' => '▓', //  dark shade
		'squ' => '□', //  white square
		'square' => '□',
		'Square' => '□',
		'squf' => '▪', //  black small square
		'squarf' => '▪',
		'blacksquare' => '▪',
		'FilledVerySmallSquare' => '▪',
		'EmptyVerySmallSquare' => '▫', //  white small square
		'rect' => '▭', //  white rectangle
		'marker' => '▮', //  black vertical rectangle
		'fltns' => '▱', //  white parallelogram
		'xutri' => '△', //  white up-pointing triangle
		'bigtriangleup' => '△',
		'utrif' => '▴', //  black up-pointing small triangle
		'blacktriangle' => '▴',
		'utri' => '▵', //  white up-pointing small triangle
		'triangle' => '▵',
		'rtrif' => '▸', //  black right-pointing small triangle
		'blacktriangleright' => '▸',
		'rtri' => '▹', //  white right-pointing small triangle
		'triangleright' => '▹',
		'xdtri' => '▽', //  white down-pointing triangle
		'bigtriangledown' => '▽',
		'dtrif' => '▾', //  black down-pointing small triangle
		'blacktriangledown' => '▾',
		'dtri' => '▿', //  white down-pointing small triangle
		'triangledown' => '▿',
		'ltrif' => '◂', //  black left-pointing small triangle
		'blacktriangleleft' => '◂',
		'ltri' => '◃', //  white left-pointing small triangle
		'triangleleft' => '◃',
		'loz' => '◊', //  lozenge
		'lozenge' => '◊',
		'cir' => '○', //  white circle
		'tridot' => '◬', //  white up-pointing triangle with dot
		'xcirc' => '◯', //  large circle
		'bigcirc' => '◯',
		'ultri' => '◸', //  upper left triangle
		'urtri' => '◹', //  upper right triangle
		'lltri' => '◺', //  lower left triangle
		'EmptySmallSquare' => '◻', //  white medium square
		'FilledSmallSquare' => '◼', //  black medium square
		'starf' => '★', //  black star
		'bigstar' => '★',
		'star' => '☆', //  white star
		'phone' => '☎', //  black telephone
		'female' => '♀', //  female sign
		'male' => '♂', //  male sign
		'spades' => '♠', //  black spade suit
		'spadesuit' => '♠',
		'clubs' => '♣', //  black club suit
		'clubsuit' => '♣',
		'hearts' => '♥', //  black heart suit
		'heartsuit' => '♥',
		'diams' => '♦', //  black diamond suit
		'diamondsuit' => '♦',
		'sung' => '♪', //  eighth note
		'flat' => '♭', //  music flat sign
		'natur' => '♮', //  music natural sign
		'natural' => '♮',
		'sharp' => '♯', //  music sharp sign
		'check' => '✓', //  check mark
		'checkmark' => '✓',
		'cross' => '✗', //  ballot x
		'malt' => '✠', //  maltese cross
		'maltese' => '✠',
		'sext' => '✶', //  six pointed black star
		'VerticalSeparator' => '❘', //  light vertical bar
		'lbbrk' => '❲', //  light left tortoise shell bracket ornament
		'rbbrk' => '❳', //  light right tortoise shell bracket ornament
		'lobrk' => '⟦', //  mathematical left white square bracket
		'LeftDoubleBracket' => '⟦',
		'robrk' => '⟧', //  mathematical right white square bracket
		'RightDoubleBracket' => '⟧',
		'lang' => '⟨', //  mathematical left angle bracket
		'LeftAngleBracket' => '⟨',
		'langle' => '⟨',
		'rang' => '⟩', //  mathematical right angle bracket
		'RightAngleBracket' => '⟩',
		'rangle' => '⟩',
		'Lang' => '⟪', //  mathematical left double angle bracket
		'Rang' => '⟫', //  mathematical right double angle bracket
		'loang' => '⟬', //  mathematical left white tortoise shell bracket
		'roang' => '⟭', //  mathematical right white tortoise shell bracket
		'xlarr' => '⟵', //  long leftwards arrow
		'longleftarrow' => '⟵',
		'LongLeftArrow' => '⟵',
		'xrarr' => '⟶', //  long rightwards arrow
		'longrightarrow' => '⟶',
		'LongRightArrow' => '⟶',
		'xharr' => '⟷', //  long left right arrow
		'longleftrightarrow' => '⟷',
		'LongLeftRightArrow' => '⟷',
		'xlArr' => '⟸', //  long leftwards double arrow
		'Longleftarrow' => '⟸',
		'DoubleLongLeftArrow' => '⟸',
		'xrArr' => '⟹', //  long rightwards double arrow
		'Longrightarrow' => '⟹',
		'DoubleLongRightArrow' => '⟹',
		'xhArr' => '⟺', //  long left right double arrow
		'Longleftrightarrow' => '⟺',
		'DoubleLongLeftRightArrow' => '⟺',
		'xmap' => '⟼', //  long rightwards arrow from bar
		'longmapsto' => '⟼',
		'dzigrarr' => '⟿', //  long rightwards squiggle arrow
		'nvlArr' => '⤂', //  leftwards double arrow with vertical stroke
		'nvrArr' => '⤃', //  rightwards double arrow with vertical stroke
		'nvHarr' => '⤄', //  left right double arrow with vertical stroke
		'Map' => '⤅', //  rightwards two-headed arrow from bar
		'lbarr' => '⤌', //  leftwards double dash arrow
		'rbarr' => '⤍', //  rightwards double dash arrow
		'bkarow' => '⤍',
		'lBarr' => '⤎', //  leftwards triple dash arrow
		'rBarr' => '⤏', //  rightwards triple dash arrow
		'dbkarow' => '⤏',
		'RBarr' => '⤐', //  rightwards two-headed triple dash arrow
		'drbkarow' => '⤐',
		'DDotrahd' => '⤑', //  rightwards arrow with dotted stem
		'UpArrowBar' => '⤒', //  upwards arrow to bar
		'DownArrowBar' => '⤓', //  downwards arrow to bar
		'Rarrtl' => '⤖', //  rightwards two-headed arrow with tail
		'latail' => '⤙', //  leftwards arrow-tail
		'ratail' => '⤚', //  rightwards arrow-tail
		'lAtail' => '⤛', //  leftwards double arrow-tail
		'rAtail' => '⤜', //  rightwards double arrow-tail
		'larrfs' => '⤝', //  leftwards arrow to black diamond
		'rarrfs' => '⤞', //  rightwards arrow to black diamond
		'larrbfs' => '⤟', //  leftwards arrow from bar to black diamond
		'rarrbfs' => '⤠', //  rightwards arrow from bar to black diamond
		'nwarhk' => '⤣', //  north west arrow with hook
		'nearhk' => '⤤', //  north east arrow with hook
		'searhk' => '⤥', //  south east arrow with hook
		'hksearow' => '⤥',
		'swarhk' => '⤦', //  south west arrow with hook
		'hkswarow' => '⤦',
		'nwnear' => '⤧', //  north west arrow and north east arrow
		'nesear' => '⤨', //  north east arrow and south east arrow
		'toea' => '⤨',
		'seswar' => '⤩', //  south east arrow and south west arrow
		'tosa' => '⤩',
		'swnwar' => '⤪', //  south west arrow and north west arrow
		'rarrc' => '⤳', //  wave arrow pointing directly right
		'cudarrr' => '⤵', //  arrow pointing rightwards then curving downwards
		'ldca' => '⤶', //  arrow pointing downwards then curving leftwards
		'rdca' => '⤷', //  arrow pointing downwards then curving rightwards
		'cudarrl' => '⤸', //  right-side arc clockwise arrow
		'larrpl' => '⤹', //  left-side arc anticlockwise arrow
		'curarrm' => '⤼', //  top arc clockwise arrow with minus
		'cularrp' => '⤽', //  top arc anticlockwise arrow with plus
		'rarrpl' => '⥅', //  rightwards arrow with plus below
		'harrcir' => '⥈', //  left right arrow through small circle
		'Uarrocir' => '⥉', //  upwards two-headed arrow from small circle
		'lurdshar' => '⥊', //  left barb up right barb down harpoon
		'ldrushar' => '⥋', //  left barb down right barb up harpoon
		'LeftRightVector' => '⥎', //  left barb up right barb up harpoon
		'RightUpDownVector' => '⥏', //  up barb right down barb right harpoon
		'DownLeftRightVector' => '⥐', //  left barb down right barb down harpoon
		'LeftUpDownVector' => '⥑', //  up barb left down barb left harpoon
		'LeftVectorBar' => '⥒', //  leftwards harpoon with barb up to bar
		'RightVectorBar' => '⥓', //  rightwards harpoon with barb up to bar
		'RightUpVectorBar' => '⥔', //  upwards harpoon with barb right to bar
		'RightDownVectorBar' => '⥕', //  downwards harpoon with barb right to bar
		'DownLeftVectorBar' => '⥖', //  leftwards harpoon with barb down to bar
		'DownRightVectorBar' => '⥗', //  rightwards harpoon with barb down to bar
		'LeftUpVectorBar' => '⥘', //  upwards harpoon with barb left to bar
		'LeftDownVectorBar' => '⥙', //  downwards harpoon with barb left to bar
		'LeftTeeVector' => '⥚', //  leftwards harpoon with barb up from bar
		'RightTeeVector' => '⥛', //  rightwards harpoon with barb up from bar
		'RightUpTeeVector' => '⥜', //  upwards harpoon with barb right from bar
		'RightDownTeeVector' => '⥝', //  downwards harpoon with barb right from bar
		'DownLeftTeeVector' => '⥞', //  leftwards harpoon with barb down from bar
		'DownRightTeeVector' => '⥟', //  rightwards harpoon with barb down from bar
		'LeftUpTeeVector' => '⥠', //  upwards harpoon with barb left from bar
		'LeftDownTeeVector' => '⥡', //  downwards harpoon with barb left from bar
		'lHar' => '⥢', //  leftwards harpoon with barb up above leftwards harpoon with barb down
		'uHar' => '⥣', //  upwards harpoon with barb left beside upwards harpoon with barb right
		'rHar' => '⥤', //  rightwards harpoon with barb up above rightwards harpoon with barb down
		'dHar' => '⥥', //  downwards harpoon with barb left beside downwards harpoon with barb right
		'luruhar' => '⥦', //  leftwards harpoon with barb up above rightwards harpoon with barb up
		'ldrdhar' => '⥧', //  leftwards harpoon with barb down above rightwards harpoon with barb down
		'ruluhar' => '⥨', //  rightwards harpoon with barb up above leftwards harpoon with barb up
		'rdldhar' => '⥩', //  rightwards harpoon with barb down above leftwards harpoon with barb down
		'lharul' => '⥪', //  leftwards harpoon with barb up above long dash
		'llhard' => '⥫', //  leftwards harpoon with barb down below long dash
		'rharul' => '⥬', //  rightwards harpoon with barb up above long dash
		'lrhard' => '⥭', //  rightwards harpoon with barb down below long dash
		'udhar' => '⥮', //  upwards harpoon with barb left beside downwards harpoon with barb right
		'UpEquilibrium' => '⥮',
		'duhar' => '⥯', //  downwards harpoon with barb left beside upwards harpoon with barb right
		'ReverseUpEquilibrium' => '⥯',
		'RoundImplies' => '⥰', //  right double arrow with rounded head
		'erarr' => '⥱', //  equals sign above rightwards arrow
		'simrarr' => '⥲', //  tilde operator above rightwards arrow
		'larrsim' => '⥳', //  leftwards arrow above tilde operator
		'rarrsim' => '⥴', //  rightwards arrow above tilde operator
		'rarrap' => '⥵', //  rightwards arrow above almost equal to
		'ltlarr' => '⥶', //  less-than above leftwards arrow
		'gtrarr' => '⥸', //  greater-than above rightwards arrow
		'subrarr' => '⥹', //  subset above rightwards arrow
		'suplarr' => '⥻', //  superset above leftwards arrow
		'lfisht' => '⥼', //  left fish tail
		'rfisht' => '⥽', //  right fish tail
		'ufisht' => '⥾', //  up fish tail
		'dfisht' => '⥿', //  down fish tail
		'lopar' => '⦅', //  left white parenthesis
		'ropar' => '⦆', //  right white parenthesis
		'lbrke' => '⦋', //  left square bracket with underbar
		'rbrke' => '⦌', //  right square bracket with underbar
		'lbrkslu' => '⦍', //  left square bracket with tick in top corner
		'rbrksld' => '⦎', //  right square bracket with tick in bottom corner
		'lbrksld' => '⦏', //  left square bracket with tick in bottom corner
		'rbrkslu' => '⦐', //  right square bracket with tick in top corner
		'langd' => '⦑', //  left angle bracket with dot
		'rangd' => '⦒', //  right angle bracket with dot
		'lparlt' => '⦓', //  left arc less-than bracket
		'rpargt' => '⦔', //  right arc greater-than bracket
		'gtlPar' => '⦕', //  double left arc greater-than bracket
		'ltrPar' => '⦖', //  double right arc less-than bracket
		'vzigzag' => '⦚', //  vertical zigzag line
		'vangrt' => '⦜', //  right angle variant with square
		'angrtvbd' => '⦝', //  measured right angle with dot
		'ange' => '⦤', //  angle with underbar
		'range' => '⦥', //  reversed angle with underbar
		'dwangle' => '⦦', //  oblique angle opening up
		'uwangle' => '⦧', //  oblique angle opening down
		'angmsdaa' => '⦨', //  measured angle with open arm ending in arrow pointing up and right
		'angmsdab' => '⦩', //  measured angle with open arm ending in arrow pointing up and left
		'angmsdac' => '⦪', //  measured angle with open arm ending in arrow pointing down and right
		'angmsdad' => '⦫', //  measured angle with open arm ending in arrow pointing down and left
		'angmsdae' => '⦬', //  measured angle with open arm ending in arrow pointing right and up
		'angmsdaf' => '⦭', //  measured angle with open arm ending in arrow pointing left and up
		'angmsdag' => '⦮', //  measured angle with open arm ending in arrow pointing right and down
		'angmsdah' => '⦯', //  measured angle with open arm ending in arrow pointing left and down
		'bemptyv' => '⦰', //  reversed empty set
		'demptyv' => '⦱', //  empty set with overbar
		'cemptyv' => '⦲', //  empty set with small circle above
		'raemptyv' => '⦳', //  empty set with right arrow above
		'laemptyv' => '⦴', //  empty set with left arrow above
		'ohbar' => '⦵', //  circle with horizontal bar
		'omid' => '⦶', //  circled vertical bar
		'opar' => '⦷', //  circled parallel
		'operp' => '⦹', //  circled perpendicular
		'olcross' => '⦻', //  circle with superimposed x
		'odsold' => '⦼', //  circled anticlockwise-rotated division sign
		'olcir' => '⦾', //  circled white bullet
		'ofcir' => '⦿', //  circled bullet
		'olt' => '⧀', //  circled less-than
		'ogt' => '⧁', //  circled greater-than
		'cirscir' => '⧂', //  circle with small circle to the right
		'cirE' => '⧃', //  circle with two horizontal strokes to the right
		'solb' => '⧄', //  squared rising diagonal slash
		'bsolb' => '⧅', //  squared falling diagonal slash
		'boxbox' => '⧉', //  two joined squares
		'trisb' => '⧍', //  triangle with serifs at bottom
		'rtriltri' => '⧎', //  right triangle above left triangle
		'LeftTriangleBar' => '⧏', //  left triangle beside vertical bar
		'RightTriangleBar' => '⧐', //  vertical bar beside right triangle
		'race' => '⧚', //  left double wiggly fence
		'iinfin' => '⧜', //  incomplete infinity
		'infintie' => '⧝', //  tie over infinity
		'nvinfin' => '⧞', //  infinity negated with vertical bar
		'eparsl' => '⧣', //  equals sign and slanted parallel
		'smeparsl' => '⧤', //  equals sign and slanted parallel with tilde above
		'eqvparsl' => '⧥', //  identical to and slanted parallel
		'lozf' => '⧫', //  black lozenge
		'blacklozenge' => '⧫',
		'RuleDelayed' => '⧴', //  rule-delayed
		'dsol' => '⧶', //  solidus with overbar
		'xodot' => '⨀', //  n-ary circled dot operator
		'bigodot' => '⨀',
		'xoplus' => '⨁', //  n-ary circled plus operator
		'bigoplus' => '⨁',
		'xotime' => '⨂', //  n-ary circled times operator
		'bigotimes' => '⨂',
		'xuplus' => '⨄', //  n-ary union operator with plus
		'biguplus' => '⨄',
		'xsqcup' => '⨆', //  n-ary square union operator
		'bigsqcup' => '⨆',
		'qint' => '⨌', //  quadruple integral operator
		'iiiint' => '⨌',
		'fpartint' => '⨍', //  finite part integral
		'cirfnint' => '⨐', //  circulation function
		'awint' => '⨑', //  anticlockwise integration
		'rppolint' => '⨒', //  line integration with rectangular path around pole
		'scpolint' => '⨓', //  line integration with semicircular path around pole
		'npolint' => '⨔', //  line integration not including the pole
		'pointint' => '⨕', //  integral around a point operator
		'quatint' => '⨖', //  quaternion integral operator
		'intlarhk' => '⨗', //  integral with leftwards arrow with hook
		'pluscir' => '⨢', //  plus sign with small circle above
		'plusacir' => '⨣', //  plus sign with circumflex accent above
		'simplus' => '⨤', //  plus sign with tilde above
		'plusdu' => '⨥', //  plus sign with dot below
		'plussim' => '⨦', //  plus sign with tilde below
		'plustwo' => '⨧', //  plus sign with subscript two
		'mcomma' => '⨩', //  minus sign with comma above
		'minusdu' => '⨪', //  minus sign with dot below
		'loplus' => '⨭', //  plus sign in left half circle
		'roplus' => '⨮', //  plus sign in right half circle
		'Cross' => '⨯', //  vector or cross product
		'timesd' => '⨰', //  multiplication sign with dot above
		'timesbar' => '⨱', //  multiplication sign with underbar
		'smashp' => '⨳', //  smash product
		'lotimes' => '⨴', //  multiplication sign in left half circle
		'rotimes' => '⨵', //  multiplication sign in right half circle
		'otimesas' => '⨶', //  circled multiplication sign with circumflex accent
		'Otimes' => '⨷', //  multiplication sign in double circle
		'odiv' => '⨸', //  circled division sign
		'triplus' => '⨹', //  plus sign in triangle
		'triminus' => '⨺', //  minus sign in triangle
		'tritime' => '⨻', //  multiplication sign in triangle
		'iprod' => '⨼', //  interior product
		'intprod' => '⨼',
		'amalg' => '⨿', //  amalgamation or coproduct
		'capdot' => '⩀', //  intersection with dot
		'ncup' => '⩂', //  union with overbar
		'ncap' => '⩃', //  intersection with overbar
		'capand' => '⩄', //  intersection with logical and
		'cupor' => '⩅', //  union with logical or
		'cupcap' => '⩆', //  union above intersection
		'capcup' => '⩇', //  intersection above union
		'cupbrcap' => '⩈', //  union above bar above intersection
		'capbrcup' => '⩉', //  intersection above bar above union
		'cupcup' => '⩊', //  union beside and joined with union
		'capcap' => '⩋', //  intersection beside and joined with intersection
		'ccups' => '⩌', //  closed union with serifs
		'ccaps' => '⩍', //  closed intersection with serifs
		'ccupssm' => '⩐', //  closed union with serifs and smash product
		'And' => '⩓', //  double logical and
		'Or' => '⩔', //  double logical or
		'andand' => '⩕', //  two intersecting logical and
		'oror' => '⩖', //  two intersecting logical or
		'orslope' => '⩗', //  sloping large or
		'andslope' => '⩘', //  sloping large and
		'andv' => '⩚', //  logical and with middle stem
		'orv' => '⩛', //  logical or with middle stem
		'andd' => '⩜', //  logical and with horizontal dash
		'ord' => '⩝', //  logical or with horizontal dash
		'wedbar' => '⩟', //  logical and with underbar
		'sdote' => '⩦', //  equals sign with dot below
		'simdot' => '⩪', //  tilde operator with dot above
		'congdot' => '⩭', //  congruent with dot above
		'easter' => '⩮', //  equals with asterisk
		'apacir' => '⩯', //  almost equal to with circumflex accent
		'apE' => '⩰', //  approximately equal or equal to
		'eplus' => '⩱', //  equals sign above plus sign
		'pluse' => '⩲', //  plus sign above equals sign
		'Esim' => '⩳', //  equals sign above tilde operator
		'Colone' => '⩴', //  double colon equal
		'Equal' => '⩵', //  two consecutive equals signs
		'eDDot' => '⩷', //  equals sign with two dots above and two dots below
		'ddotseq' => '⩷',
		'equivDD' => '⩸', //  equivalent with four dots above
		'ltcir' => '⩹', //  less-than with circle inside
		'gtcir' => '⩺', //  greater-than with circle inside
		'ltquest' => '⩻', //  less-than with question mark above
		'gtquest' => '⩼', //  greater-than with question mark above
		'les' => '⩽', //  less-than or slanted equal to
		'LessSlantEqual' => '⩽',
		'leqslant' => '⩽',
		'ges' => '⩾', //  greater-than or slanted equal to
		'GreaterSlantEqual' => '⩾',
		'geqslant' => '⩾',
		'lesdot' => '⩿', //  less-than or slanted equal to with dot inside
		'gesdot' => '⪀', //  greater-than or slanted equal to with dot inside
		'lesdoto' => '⪁', //  less-than or slanted equal to with dot above
		'gesdoto' => '⪂', //  greater-than or slanted equal to with dot above
		'lesdotor' => '⪃', //  less-than or slanted equal to with dot above right
		'gesdotol' => '⪄', //  greater-than or slanted equal to with dot above left
		'lap' => '⪅', //  less-than or approximate
		'lessapprox' => '⪅',
		'gap' => '⪆', //  greater-than or approximate
		'gtrapprox' => '⪆',
		'lne' => '⪇', //  less-than and single-line not equal to
		'lneq' => '⪇',
		'gne' => '⪈', //  greater-than and single-line not equal to
		'gneq' => '⪈',
		'lnap' => '⪉', //  less-than and not approximate
		'lnapprox' => '⪉',
		'gnap' => '⪊', //  greater-than and not approximate
		'gnapprox' => '⪊',
		'lEg' => '⪋', //  less-than above double-line equal above greater-than
		'lesseqqgtr' => '⪋',
		'gEl' => '⪌', //  greater-than above double-line equal above less-than
		'gtreqqless' => '⪌',
		'lsime' => '⪍', //  less-than above similar or equal
		'gsime' => '⪎', //  greater-than above similar or equal
		'lsimg' => '⪏', //  less-than above similar above greater-than
		'gsiml' => '⪐', //  greater-than above similar above less-than
		'lgE' => '⪑', //  less-than above greater-than above double-line equal
		'glE' => '⪒', //  greater-than above less-than above double-line equal
		'lesges' => '⪓', //  less-than above slanted equal above greater-than above slanted equal
		'gesles' => '⪔', //  greater-than above slanted equal above less-than above slanted equal
		'els' => '⪕', //  slanted equal to or less-than
		'eqslantless' => '⪕',
		'egs' => '⪖', //  slanted equal to or greater-than
		'eqslantgtr' => '⪖',
		'elsdot' => '⪗', //  slanted equal to or less-than with dot inside
		'egsdot' => '⪘', //  slanted equal to or greater-than with dot inside
		'el' => '⪙', //  double-line equal to or less-than
		'eg' => '⪚', //  double-line equal to or greater-than
		'siml' => '⪝', //  similar or less-than
		'simg' => '⪞', //  similar or greater-than
		'simlE' => '⪟', //  similar above less-than above equals sign
		'simgE' => '⪠', //  similar above greater-than above equals sign
		'LessLess' => '⪡', //  double nested less-than
		'GreaterGreater' => '⪢', //  double nested greater-than
		'glj' => '⪤', //  greater-than overlapping less-than
		'gla' => '⪥', //  greater-than beside less-than
		'ltcc' => '⪦', //  less-than closed by curve
		'gtcc' => '⪧', //  greater-than closed by curve
		'lescc' => '⪨', //  less-than closed by curve above slanted equal
		'gescc' => '⪩', //  greater-than closed by curve above slanted equal
		'smt' => '⪪', //  smaller than
		'lat' => '⪫', //  larger than
		'smte' => '⪬', //  smaller than or equal to
		'late' => '⪭', //  larger than or equal to
		'bumpE' => '⪮', //  equals sign with bumpy above
		'pre' => '⪯', //  precedes above single-line equals sign
		'preceq' => '⪯',
		'PrecedesEqual' => '⪯',
		'sce' => '⪰', //  succeeds above single-line equals sign
		'succeq' => '⪰',
		'SucceedsEqual' => '⪰',
		'prE' => '⪳', //  precedes above equals sign
		'scE' => '⪴', //  succeeds above equals sign
		'prnE' => '⪵', //  precedes above not equal to
		'precneqq' => '⪵',
		'scnE' => '⪶', //  succeeds above not equal to
		'succneqq' => '⪶',
		'prap' => '⪷', //  precedes above almost equal to
		'precapprox' => '⪷',
		'scap' => '⪸', //  succeeds above almost equal to
		'succapprox' => '⪸',
		'prnap' => '⪹', //  precedes above not almost equal to
		'precnapprox' => '⪹',
		'scnap' => '⪺', //  succeeds above not almost equal to
		'succnapprox' => '⪺',
		'Pr' => '⪻', //  double precedes
		'Sc' => '⪼', //  double succeeds
		'subdot' => '⪽', //  subset with dot
		'supdot' => '⪾', //  superset with dot
		'subplus' => '⪿', //  subset with plus sign below
		'supplus' => '⫀', //  superset with plus sign below
		'submult' => '⫁', //  subset with multiplication sign below
		'supmult' => '⫂', //  superset with multiplication sign below
		'subedot' => '⫃', //  subset of or equal to with dot above
		'supedot' => '⫄', //  superset of or equal to with dot above
		'subE' => '⫅', //  subset of above equals sign
		'subseteqq' => '⫅',
		'supE' => '⫆', //  superset of above equals sign
		'supseteqq' => '⫆',
		'subsim' => '⫇', //  subset of above tilde operator
		'supsim' => '⫈', //  superset of above tilde operator
		'subnE' => '⫋', //  subset of above not equal to
		'subsetneqq' => '⫋',
		'supnE' => '⫌', //  superset of above not equal to
		'supsetneqq' => '⫌',
		'csub' => '⫏', //  closed subset
		'csup' => '⫐', //  closed superset
		'csube' => '⫑', //  closed subset or equal to
		'csupe' => '⫒', //  closed superset or equal to
		'subsup' => '⫓', //  subset above superset
		'supsub' => '⫔', //  superset above subset
		'subsub' => '⫕', //  subset above subset
		'supsup' => '⫖', //  superset above superset
		'suphsub' => '⫗', //  superset beside subset
		'supdsub' => '⫘', //  superset beside and joined by dash with subset
		'forkv' => '⫙', //  element of opening downwards
		'topfork' => '⫚', //  pitchfork with tee top
		'mlcp' => '⫛', //  transversal intersection
		'Dashv' => '⫤', //  vertical bar double left turnstile
		'DoubleLeftTee' => '⫤',
		'Vdashl' => '⫦', //  long dash from left member of double vertical
		'Barv' => '⫧', //  short down tack with overbar
		'vBar' => '⫨', //  short up tack with underbar
		'vBarv' => '⫩', //  short up tack above short down tack
		'Vbar' => '⫫', //  double up tack
		'Not' => '⫬', //  double stroke not sign
		'bNot' => '⫭', //  reversed double stroke not sign
		'rnmid' => '⫮', //  does not divide with reversed negation slash
		'cirmid' => '⫯', //  vertical line with circle above
		'midcir' => '⫰', //  vertical line with circle below
		'topcir' => '⫱', //  down tack with circle below
		'nhpar' => '⫲', //  parallel with horizontal stroke
		'parsim' => '⫳', //  parallel with tilde operator
		'parsl' => '⫽', //  double solidus operator
		'fflig' => 'ﬀ', //  latin small ligature ff
		'filig' => 'ﬁ', //  latin small ligature fi
		'fllig' => 'ﬂ', //  latin small ligature fl
		'ffilig' => 'ﬃ', //  latin small ligature ffi
		'ffllig' => 'ﬄ', //  latin small ligature ffl
		'Ascr' => '𝒜', //  mathematical script capital a
		'Cscr' => '𝒞', //  mathematical script capital c
		'Dscr' => '𝒟', //  mathematical script capital d
		'Gscr' => '𝒢', //  mathematical script capital g
		'Jscr' => '𝒥', //  mathematical script capital j
		'Kscr' => '𝒦', //  mathematical script capital k
		'Nscr' => '𝒩', //  mathematical script capital n
		'Oscr' => '𝒪', //  mathematical script capital o
		'Pscr' => '𝒫', //  mathematical script capital p
		'Qscr' => '𝒬', //  mathematical script capital q
		'Sscr' => '𝒮', //  mathematical script capital s
		'Tscr' => '𝒯', //  mathematical script capital t
		'Uscr' => '𝒰', //  mathematical script capital u
		'Vscr' => '𝒱', //  mathematical script capital v
		'Wscr' => '𝒲', //  mathematical script capital w
		'Xscr' => '𝒳', //  mathematical script capital x
		'Yscr' => '𝒴', //  mathematical script capital y
		'Zscr' => '𝒵', //  mathematical script capital z
		'ascr' => '𝒶', //  mathematical script small a
		'bscr' => '𝒷', //  mathematical script small b
		'cscr' => '𝒸', //  mathematical script small c
		'dscr' => '𝒹', //  mathematical script small d
		'fscr' => '𝒻', //  mathematical script small f
		'hscr' => '𝒽', //  mathematical script small h
		'iscr' => '𝒾', //  mathematical script small i
		'jscr' => '𝒿', //  mathematical script small j
		'kscr' => '𝓀', //  mathematical script small k
		'lscr' => '𝓁', //  mathematical script small l
		'mscr' => '𝓂', //  mathematical script small m
		'nscr' => '𝓃', //  mathematical script small n
		'pscr' => '𝓅', //  mathematical script small p
		'qscr' => '𝓆', //  mathematical script small q
		'rscr' => '𝓇', //  mathematical script small r
		'sscr' => '𝓈', //  mathematical script small s
		'tscr' => '𝓉', //  mathematical script small t
		'uscr' => '𝓊', //  mathematical script small u
		'vscr' => '𝓋', //  mathematical script small v
		'wscr' => '𝓌', //  mathematical script small w
		'xscr' => '𝓍', //  mathematical script small x
		'yscr' => '𝓎', //  mathematical script small y
		'zscr' => '𝓏', //  mathematical script small z
		'Afr' => '𝔄', //  mathematical fraktur capital a
		'Bfr' => '𝔅', //  mathematical fraktur capital b
		'Dfr' => '𝔇', //  mathematical fraktur capital d
		'Efr' => '𝔈', //  mathematical fraktur capital e
		'Ffr' => '𝔉', //  mathematical fraktur capital f
		'Gfr' => '𝔊', //  mathematical fraktur capital g
		'Jfr' => '𝔍', //  mathematical fraktur capital j
		'Kfr' => '𝔎', //  mathematical fraktur capital k
		'Lfr' => '𝔏', //  mathematical fraktur capital l
		'Mfr' => '𝔐', //  mathematical fraktur capital m
		'Nfr' => '𝔑', //  mathematical fraktur capital n
		'Ofr' => '𝔒', //  mathematical fraktur capital o
		'Pfr' => '𝔓', //  mathematical fraktur capital p
		'Qfr' => '𝔔', //  mathematical fraktur capital q
		'Sfr' => '𝔖', //  mathematical fraktur capital s
		'Tfr' => '𝔗', //  mathematical fraktur capital t
		'Ufr' => '𝔘', //  mathematical fraktur capital u
		'Vfr' => '𝔙', //  mathematical fraktur capital v
		'Wfr' => '𝔚', //  mathematical fraktur capital w
		'Xfr' => '𝔛', //  mathematical fraktur capital x
		'Yfr' => '𝔜', //  mathematical fraktur capital y
		'afr' => '𝔞', //  mathematical fraktur small a
		'bfr' => '𝔟', //  mathematical fraktur small b
		'cfr' => '𝔠', //  mathematical fraktur small c
		'dfr' => '𝔡', //  mathematical fraktur small d
		'efr' => '𝔢', //  mathematical fraktur small e
		'ffr' => '𝔣', //  mathematical fraktur small f
		'gfr' => '𝔤', //  mathematical fraktur small g
		'hfr' => '𝔥', //  mathematical fraktur small h
		'ifr' => '𝔦', //  mathematical fraktur small i
		'jfr' => '𝔧', //  mathematical fraktur small j
		'kfr' => '𝔨', //  mathematical fraktur small k
		'lfr' => '𝔩', //  mathematical fraktur small l
		'mfr' => '𝔪', //  mathematical fraktur small m
		'nfr' => '𝔫', //  mathematical fraktur small n
		'ofr' => '𝔬', //  mathematical fraktur small o
		'pfr' => '𝔭', //  mathematical fraktur small p
		'qfr' => '𝔮', //  mathematical fraktur small q
		'rfr' => '𝔯', //  mathematical fraktur small r
		'sfr' => '𝔰', //  mathematical fraktur small s
		'tfr' => '𝔱', //  mathematical fraktur small t
		'ufr' => '𝔲', //  mathematical fraktur small u
		'vfr' => '𝔳', //  mathematical fraktur small v
		'wfr' => '𝔴', //  mathematical fraktur small w
		'xfr' => '𝔵', //  mathematical fraktur small x
		'yfr' => '𝔶', //  mathematical fraktur small y
		'zfr' => '𝔷', //  mathematical fraktur small z
		'Aopf' => '𝔸', //  mathematical double-struck capital a
		'Bopf' => '𝔹', //  mathematical double-struck capital b
		'Dopf' => '𝔻', //  mathematical double-struck capital d
		'Eopf' => '𝔼', //  mathematical double-struck capital e
		'Fopf' => '𝔽', //  mathematical double-struck capital f
		'Gopf' => '𝔾', //  mathematical double-struck capital g
		'Iopf' => '𝕀', //  mathematical double-struck capital i
		'Jopf' => '𝕁', //  mathematical double-struck capital j
		'Kopf' => '𝕂', //  mathematical double-struck capital k
		'Lopf' => '𝕃', //  mathematical double-struck capital l
		'Mopf' => '𝕄', //  mathematical double-struck capital m
		'Oopf' => '𝕆', //  mathematical double-struck capital o
		'Sopf' => '𝕊', //  mathematical double-struck capital s
		'Topf' => '𝕋', //  mathematical double-struck capital t
		'Uopf' => '𝕌', //  mathematical double-struck capital u
		'Vopf' => '𝕍', //  mathematical double-struck capital v
		'Wopf' => '𝕎', //  mathematical double-struck capital w
		'Xopf' => '𝕏', //  mathematical double-struck capital x
		'Yopf' => '𝕐', //  mathematical double-struck capital y
		'aopf' => '𝕒', //  mathematical double-struck small a
		'bopf' => '𝕓', //  mathematical double-struck small b
		'copf' => '𝕔', //  mathematical double-struck small c
		'dopf' => '𝕕', //  mathematical double-struck small d
		'eopf' => '𝕖', //  mathematical double-struck small e
		'fopf' => '𝕗', //  mathematical double-struck small f
		'gopf' => '𝕘', //  mathematical double-struck small g
		'hopf' => '𝕙', //  mathematical double-struck small h
		'iopf' => '𝕚', //  mathematical double-struck small i
		'jopf' => '𝕛', //  mathematical double-struck small j
		'kopf' => '𝕜', //  mathematical double-struck small k
		'lopf' => '𝕝', //  mathematical double-struck small l
		'mopf' => '𝕞', //  mathematical double-struck small m
		'nopf' => '𝕟', //  mathematical double-struck small n
		'oopf' => '𝕠', //  mathematical double-struck small o
		'popf' => '𝕡', //  mathematical double-struck small p
		'qopf' => '𝕢', //  mathematical double-struck small q
		'ropf' => '𝕣', //  mathematical double-struck small r
		'sopf' => '𝕤', //  mathematical double-struck small s
		'topf' => '𝕥', //  mathematical double-struck small t
		'uopf' => '𝕦', //  mathematical double-struck small u
		'vopf' => '𝕧', //  mathematical double-struck small v
		'wopf' => '𝕨', //  mathematical double-struck small w
		'xopf' => '𝕩', //  mathematical double-struck small x
		'yopf' => '𝕪', //  mathematical double-struck small y
		'zopf' => '𝕫', //  mathematical double-struck small z
	);

	/**
	 *  Get the value of the entity, or fall down to custom property
	 *  @name   get
	 *  @type   method
	 *  @access public
	 *  @param  string entity
	 *  @return string value
	 */
	public function get($property, $default=null)
	{
		if (isset(self::$resolve[$property]))
			return self::$resolve[$property];
		return parent::get($property, $default);
	}
}